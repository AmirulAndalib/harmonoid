diff --git a/lib/interface/collection/playlist.dart b/lib/interface/collection/playlist.dart
index 5011741..737a450 100644
--- a/lib/interface/collection/playlist.dart
+++ b/lib/interface/collection/playlist.dart
@@ -31,8 +31,6 @@ import 'package:harmonoid/utils/palette_generator.dart';
 import 'package:harmonoid/state/mobile_now_playing_controller.dart';
 import 'package:harmonoid/constants/language.dart';
 
-import 'package:harmonoid/web/utils/widgets.dart';
-
 class PlaylistTab extends StatelessWidget {
   final TextEditingController _controller = new TextEditingController();
 
@@ -171,25 +169,25 @@ class PlaylistTab extends StatelessWidget {
                           ),
                         ),
                       ),
-                      const SizedBox(
-                        width: 4.0,
-                      ),
-                      TextButton(
-                        onPressed: () {
-                          if (isDesktop) {
-                            showDialog(
-                              context: context,
-                              builder: (context) => PlaylistImportDialog(),
-                            );
-                          }
-                        },
-                        child: Text(
-                          Language.instance.IMPORT.toUpperCase(),
-                          style: TextStyle(
-                            color: Theme.of(context).primaryColor,
-                          ),
-                        ),
-                      ),
+                      // const SizedBox(
+                      //   width: 4.0,
+                      // ),
+                      // TextButton(
+                      //   onPressed: () {
+                      //     if (isDesktop) {
+                      //       showDialog(
+                      //         context: context,
+                      //         builder: (context) => PlaylistImportDialog(),
+                      //       );
+                      //     }
+                      //   },
+                      //   child: Text(
+                      //     Language.instance.IMPORT.toUpperCase(),
+                      //     style: TextStyle(
+                      //       color: Theme.of(context).primaryColor,
+                      //     ),
+                      //   ),
+                      // ),
                     ],
                   ),
                 ),
diff --git a/lib/interface/mini_now_playing_bar.dart b/lib/interface/mini_now_playing_bar.dart
index 3f7b571..755c186 100644
--- a/lib/interface/mini_now_playing_bar.dart
+++ b/lib/interface/mini_now_playing_bar.dart
@@ -17,7 +17,6 @@ import 'package:media_library/media_library.dart';
 import 'package:extended_image/extended_image.dart';
 import 'package:flutter_lyric/lyrics_reader.dart';
 import 'package:flutter_lyric/lyrics_reader_model.dart';
-import 'package:flutter_speed_dial/flutter_speed_dial.dart';
 
 import 'package:harmonoid/core/playback.dart';
 import 'package:harmonoid/core/collection.dart';
@@ -34,7 +33,6 @@ import 'package:harmonoid/state/mobile_now_playing_controller.dart';
 import 'package:harmonoid/interface/now_playing_bar.dart';
 import 'package:harmonoid/interface/collection/track.dart';
 import 'package:harmonoid/constants/language.dart';
-import 'package:harmonoid/web/utils/widgets.dart';
 
 const kDetailsAreaHeight = 100.0;
 
@@ -2189,158 +2187,115 @@ class MiniNowPlayingBarRefreshCollectionButtonState
               ),
               builder: (context, color, _) => Container(
                 child: widget.index.value == 3
-                    ? SpeedDial(
-                        icon: Icons.add,
-                        activeIcon: Icons.close,
-                        spacing: 8.0,
-                        heroTag: 'create-playlist-fab',
-                        elevation: 8.0,
-                        animationCurve: Curves.easeInOut,
-                        animationDuration: const Duration(milliseconds: 200),
-                        children: [
-                          SpeedDialChild(
-                            child: const Icon(Icons.downloading),
-                            label: Language.instance.IMPORT,
-                            visible: true,
-                            onTap: () {
-                              showModalBottomSheet(
-                                isScrollControlled: true,
-                                constraints: BoxConstraints(
-                                  maxHeight: double.infinity,
-                                ),
-                                context: context,
-                                elevation: 8.0,
-                                useRootNavigator: true,
-                                backgroundColor: Theme.of(context).cardColor,
-                                builder: (context) => StatefulBuilder(
-                                  builder: (context, setState) {
-                                    return PlaylistImportBottomSheet();
-                                  },
-                                ),
-                              );
-                            },
-                          ),
-                          SpeedDialChild(
-                            child: const Icon(Icons.edit),
-                            label: Language.instance.CREATE,
-                            visible: true,
-                            onTap: () async {
-                              String text = '';
-                              await showModalBottomSheet(
-                                isScrollControlled: true,
-                                context: context,
-                                elevation: 8.0,
-                                useRootNavigator: true,
-                                backgroundColor: Theme.of(context).cardColor,
-                                builder: (context) => StatefulBuilder(
-                                  builder: (context, setState) {
-                                    return Container(
-                                      margin: EdgeInsets.only(
-                                        bottom: MediaQuery.of(context)
-                                                .viewInsets
-                                                .bottom -
-                                            MediaQuery.of(context)
-                                                .padding
-                                                .bottom,
-                                      ),
-                                      padding: EdgeInsets.all(8.0),
-                                      child: Column(
-                                        mainAxisSize: MainAxisSize.min,
-                                        crossAxisAlignment:
-                                            CrossAxisAlignment.stretch,
-                                        children: [
-                                          const SizedBox(height: 4.0),
-                                          TextField(
-                                            textCapitalization:
-                                                TextCapitalization.words,
-                                            textInputAction:
-                                                TextInputAction.done,
-                                            autofocus: true,
-                                            onChanged: (value) => text = value,
-                                            onSubmitted: (String value) async {
-                                              if (value.isNotEmpty) {
-                                                FocusScope.of(context)
-                                                    .unfocus();
-                                                await Collection.instance
-                                                    .playlistCreateFromName(
-                                                        value);
-                                                Navigator.of(context)
-                                                    .maybePop();
-                                              }
-                                            },
-                                            decoration: InputDecoration(
-                                              contentPadding:
-                                                  EdgeInsets.fromLTRB(
-                                                12,
-                                                30,
-                                                12,
-                                                6,
-                                              ),
-                                              hintText: Language.instance
-                                                  .PLAYLISTS_TEXT_FIELD_LABEL,
-                                              border: OutlineInputBorder(
-                                                borderSide: BorderSide(
-                                                  color: Theme.of(context)
-                                                      .iconTheme
-                                                      .color!
-                                                      .withOpacity(0.4),
-                                                  width: 1.8,
-                                                ),
-                                              ),
-                                              enabledBorder: OutlineInputBorder(
-                                                borderSide: BorderSide(
-                                                  color: Theme.of(context)
-                                                      .iconTheme
-                                                      .color!
-                                                      .withOpacity(0.4),
-                                                  width: 1.8,
-                                                ),
-                                              ),
-                                              focusedBorder: OutlineInputBorder(
-                                                borderSide: BorderSide(
-                                                  color: Theme.of(context)
-                                                      .primaryColor,
-                                                  width: 1.8,
-                                                ),
-                                              ),
+                    ? FloatingActionButton(
+                        tooltip: Language.instance.CREATE,
+                        child: const Icon(Icons.edit),
+                        backgroundColor: color as Color?,
+                        onPressed: () async {
+                          String text = '';
+                          await showModalBottomSheet(
+                            isScrollControlled: true,
+                            context: context,
+                            elevation: 8.0,
+                            useRootNavigator: true,
+                            backgroundColor: Theme.of(context).cardColor,
+                            builder: (context) => StatefulBuilder(
+                              builder: (context, setState) {
+                                return Container(
+                                  margin: EdgeInsets.only(
+                                    bottom: MediaQuery.of(context)
+                                            .viewInsets
+                                            .bottom -
+                                        MediaQuery.of(context).padding.bottom,
+                                  ),
+                                  padding: EdgeInsets.all(8.0),
+                                  child: Column(
+                                    mainAxisSize: MainAxisSize.min,
+                                    crossAxisAlignment:
+                                        CrossAxisAlignment.stretch,
+                                    children: [
+                                      const SizedBox(height: 4.0),
+                                      TextField(
+                                        textCapitalization:
+                                            TextCapitalization.words,
+                                        textInputAction: TextInputAction.done,
+                                        autofocus: true,
+                                        onChanged: (value) => text = value,
+                                        onSubmitted: (String value) async {
+                                          if (value.isNotEmpty) {
+                                            FocusScope.of(context).unfocus();
+                                            await Collection.instance
+                                                .playlistCreateFromName(value);
+                                            Navigator.of(context).maybePop();
+                                          }
+                                        },
+                                        decoration: InputDecoration(
+                                          contentPadding: EdgeInsets.fromLTRB(
+                                            12,
+                                            30,
+                                            12,
+                                            6,
+                                          ),
+                                          hintText: Language.instance
+                                              .PLAYLISTS_TEXT_FIELD_LABEL,
+                                          border: OutlineInputBorder(
+                                            borderSide: BorderSide(
+                                              color: Theme.of(context)
+                                                  .iconTheme
+                                                  .color!
+                                                  .withOpacity(0.4),
+                                              width: 1.8,
                                             ),
                                           ),
-                                          const SizedBox(height: 4.0),
-                                          ElevatedButton(
-                                            onPressed: () async {
-                                              if (text.isNotEmpty) {
-                                                FocusScope.of(context)
-                                                    .unfocus();
-                                                await Collection.instance
-                                                    .playlistCreateFromName(
-                                                  text,
-                                                );
-                                                Navigator.of(context)
-                                                    .maybePop();
-                                              }
-                                            },
-                                            style: ButtonStyle(
-                                              backgroundColor:
-                                                  MaterialStateProperty.all(
-                                                Theme.of(context).primaryColor,
-                                              ),
+                                          enabledBorder: OutlineInputBorder(
+                                            borderSide: BorderSide(
+                                              color: Theme.of(context)
+                                                  .iconTheme
+                                                  .color!
+                                                  .withOpacity(0.4),
+                                              width: 1.8,
                                             ),
-                                            child: Text(
-                                              Language.instance.CREATE
-                                                  .toUpperCase(),
-                                              style:
-                                                  TextStyle(letterSpacing: 2.0),
+                                          ),
+                                          focusedBorder: OutlineInputBorder(
+                                            borderSide: BorderSide(
+                                              color: Theme.of(context)
+                                                  .primaryColor,
+                                              width: 1.8,
                                             ),
                                           ),
-                                        ],
+                                        ),
                                       ),
-                                    );
-                                  },
-                                ),
-                              );
-                            },
-                          ),
-                        ],
+                                      const SizedBox(height: 4.0),
+                                      ElevatedButton(
+                                        onPressed: () async {
+                                          if (text.isNotEmpty) {
+                                            FocusScope.of(context).unfocus();
+                                            await Collection.instance
+                                                .playlistCreateFromName(
+                                              text,
+                                            );
+                                            Navigator.of(context).maybePop();
+                                          }
+                                        },
+                                        style: ButtonStyle(
+                                          backgroundColor:
+                                              MaterialStateProperty.all(
+                                            Theme.of(context).primaryColor,
+                                          ),
+                                        ),
+                                        child: Text(
+                                          Language.instance.CREATE
+                                              .toUpperCase(),
+                                          style: TextStyle(letterSpacing: 2.0),
+                                        ),
+                                      ),
+                                    ],
+                                  ),
+                                );
+                              },
+                            ),
+                          );
+                        },
                       )
                     : RefreshCollectionButton(
                         color: color as Color?,
diff --git a/lib/interface/settings/about.dart b/lib/interface/settings/about.dart
index 5c55c49..4f27168 100644
--- a/lib/interface/settings/about.dart
+++ b/lib/interface/settings/about.dart
@@ -102,6 +102,7 @@ class _AboutPageState extends State<AboutPage> {
                               Text(
                                 [
                                   kVersion,
+                                  'Google Play',
                                 ].join(' • '),
                                 style: Theme.of(context).textTheme.headline3,
                               ),
@@ -147,44 +148,6 @@ class _AboutPageState extends State<AboutPage> {
                               : null,
                         ),
                       ),
-                      ListTile(
-                        onTap: () => open(URL.patreon),
-                        leading: CircleAvatar(
-                          backgroundColor: Colors.transparent,
-                          foregroundColor: Theme.of(context).iconTheme.color,
-                          child: SvgPicture.string(
-                            SVG.patreon,
-                            height: 20.0,
-                            width: 20.0,
-                            color: Theme.of(context).iconTheme.color,
-                          ),
-                        ),
-                        title: Text(
-                          Label.become_a_patreon,
-                          style: isDesktop
-                              ? Theme.of(context).textTheme.headline4
-                              : null,
-                        ),
-                      ),
-                      ListTile(
-                        onTap: () => open(URL.paypal),
-                        leading: CircleAvatar(
-                          backgroundColor: Colors.transparent,
-                          foregroundColor: Theme.of(context).iconTheme.color,
-                          child: SvgPicture.string(
-                            SVG.paypal,
-                            height: 20.0,
-                            width: 20.0,
-                            color: Theme.of(context).iconTheme.color,
-                          ),
-                        ),
-                        title: Text(
-                          Label.donate_with_paypal,
-                          style: isDesktop
-                              ? Theme.of(context).textTheme.headline4
-                              : null,
-                        ),
-                      ),
                       ListTile(
                         onTap: () => open(URL.license),
                         leading: CircleAvatar(
diff --git a/lib/utils/widgets.dart b/lib/utils/widgets.dart
index 0f16cab..1b7e8ef 100644
--- a/lib/utils/widgets.dart
+++ b/lib/utils/widgets.dart
@@ -43,7 +43,6 @@ import 'package:harmonoid/interface/file_info_screen.dart';
 import 'package:harmonoid/interface/settings/settings.dart';
 import 'package:harmonoid/interface/settings/about.dart';
 import 'package:harmonoid/constants/language.dart';
-import 'package:harmonoid/web/web.dart';
 
 class CustomListView extends StatefulWidget {
   final ScrollController? controller;
@@ -1287,7 +1286,6 @@ class ExceptionWidget extends StatelessWidget {
               Language.instance.NO_INTERNET_TITLE: VisualAssets.library,
               Language.instance.COLLECTION_SEARCH_NO_RESULTS_TITLE:
                   VisualAssets.searchPage,
-              Language.instance.WEB_WELCOME_TITLE: VisualAssets.searchNotes,
               Language.instance.COLLECTION_SEARCH_LABEL:
                   VisualAssets.searchPage,
             }[title]!,
@@ -2697,65 +2695,17 @@ class CollectionMoreButton extends StatelessWidget {
 
   @override
   Widget build(BuildContext context) {
-    return ContextMenuButton<int>(
-      padding: EdgeInsets.zero,
-      offset: Offset.fromDirection(pi / 2, 64.0),
+    return IconButton(
+      tooltip: Language.instance.READ_METADATA,
       icon: Icon(
-        Icons.more_vert,
-        size: 20.0,
+        Icons.code,
         color: Theme.of(context).appBarTheme.actionsIconTheme?.color,
       ),
-      elevation: 4.0,
-      onSelected: (value) async {
-        switch (value) {
-          case 0:
-            {
-              FileInfoScreen.show(context);
-              break;
-            }
-          case 1:
-            {
-              Navigator.of(context).push(
-                PageRouteBuilder(
-                  pageBuilder: (context, animation, secondaryAnimation) =>
-                      FadeThroughTransition(
-                    fillColor: Colors.transparent,
-                    animation: animation,
-                    secondaryAnimation: secondaryAnimation,
-                    child: WebTab(),
-                  ),
-                ),
-              );
-              break;
-            }
-        }
+      splashRadius: 20.0,
+      iconSize: 20.0,
+      onPressed: () async {
+        return FileInfoScreen.show(context);
       },
-      itemBuilder: (context) => [
-        PopupMenuItem(
-          value: 0,
-          child: ListTile(
-            contentPadding: EdgeInsets.zero,
-            dense: true,
-            leading: Icon(Icons.code),
-            title: Text(
-              Language.instance.READ_METADATA,
-              style: Theme.of(context).textTheme.headline4,
-            ),
-          ),
-        ),
-        PopupMenuItem(
-          value: 1,
-          child: ListTile(
-            contentPadding: EdgeInsets.zero,
-            dense: true,
-            leading: Icon(Icons.waves),
-            title: Text(
-              Language.instance.STREAM,
-              style: Theme.of(context).textTheme.headline4,
-            ),
-          ),
-        ),
-      ],
     );
   }
 }
@@ -3378,13 +3328,6 @@ class _MobileAppBarOverflowButtonState
                 title: Text(Language.instance.READ_METADATA),
               ),
             ),
-            PopupMenuItem(
-              value: 2,
-              child: ListTile(
-                leading: Icon(Icons.waves),
-                title: Text(Language.instance.STREAM),
-              ),
-            ),
             PopupMenuItem(
               value: 3,
               child: ListTile(
@@ -3589,21 +3532,6 @@ class _MobileAppBarOverflowButtonState
                 await FileInfoScreen.show(context);
                 break;
               }
-            case 2:
-              {
-                await Navigator.push(
-                  context,
-                  PageRouteBuilder(
-                    pageBuilder: (context, animation, secondaryAnimation) =>
-                        FadeThroughTransition(
-                      animation: animation,
-                      secondaryAnimation: secondaryAnimation,
-                      child: WebTab(),
-                    ),
-                  ),
-                );
-                break;
-              }
             case 3:
               {
                 await Navigator.push(
diff --git a/lib/web/album.dart b/lib/web/album.dart
deleted file mode 100644
index d257ed4..0000000
--- a/lib/web/album.dart
+++ /dev/null
@@ -1,1172 +0,0 @@
-/// This file is a part of Harmonoid (https://github.com/harmonoid/harmonoid).
-///
-/// Copyright © 2020-2022, Hitesh Kumar Saini <saini123hitesh@gmail.com>.
-/// All rights reserved.
-///
-/// Use of this source code is governed by the End-User License Agreement for Harmonoid that can be found in the EULA.txt file.
-///
-import 'dart:async';
-import 'dart:math';
-import 'package:animations/animations.dart';
-import 'package:flutter/material.dart';
-import 'package:flutter/services.dart';
-import 'package:harmonoid/web/web.dart';
-import 'package:readmore/readmore.dart';
-import 'package:share_plus/share_plus.dart';
-import 'package:url_launcher/url_launcher.dart';
-import 'package:ytm_client/ytm_client.dart';
-import 'package:extended_image/extended_image.dart';
-import 'package:media_library/media_library.dart' as media;
-
-import 'package:harmonoid/interface/settings/settings.dart';
-import 'package:harmonoid/constants/language.dart';
-import 'package:harmonoid/utils/rendering.dart';
-import 'package:harmonoid/web/utils/widgets.dart';
-import 'package:harmonoid/utils/dimensions.dart';
-import 'package:harmonoid/utils/widgets.dart';
-import 'package:harmonoid/utils/theme.dart';
-import 'package:harmonoid/utils/palette_generator.dart';
-import 'package:harmonoid/core/collection.dart';
-import 'package:harmonoid/web/track.dart';
-import 'package:harmonoid/web/state/web.dart';
-
-class WebAlbumLargeTile extends StatelessWidget {
-  final double width;
-  final double height;
-  final Album album;
-  const WebAlbumLargeTile({
-    Key? key,
-    required this.album,
-    required this.width,
-    required this.height,
-  }) : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    return Card(
-      clipBehavior: Clip.antiAlias,
-      elevation: 4.0,
-      margin: EdgeInsets.zero,
-      child: InkWell(
-        onTap: () async {
-          if (album.tracks.isEmpty) {
-            await Future.wait([
-              YTMClient.album(album),
-              precacheImage(
-                ExtendedNetworkImageProvider(album.thumbnails.values.last,
-                    cache: true),
-                context,
-              ),
-            ]);
-          }
-          Navigator.of(context).push(
-            PageRouteBuilder(
-              pageBuilder: (context, animation, secondaryAnimation) =>
-                  FadeThroughTransition(
-                fillColor: Colors.transparent,
-                animation: animation,
-                secondaryAnimation: secondaryAnimation,
-                child: WebAlbumScreen(
-                  album: album,
-                ),
-              ),
-            ),
-          );
-        },
-        child: Container(
-          height: height,
-          width: width,
-          child: Column(
-            children: [
-              ClipRect(
-                child: ScaleOnHover(
-                  child: Hero(
-                    tag:
-                        'album_art_${album.albumName}_${album.year}_${album.id}',
-                    child: ExtendedImage(
-                      image: ExtendedNetworkImageProvider(
-                          album.thumbnails.values.skip(1).first,
-                          cache: true),
-                      fit: BoxFit.cover,
-                      height: width,
-                      width: width,
-                    ),
-                  ),
-                ),
-              ),
-              Expanded(
-                child: Container(
-                  padding: EdgeInsets.symmetric(
-                    horizontal: isMobile ? 12.0 : 8.0,
-                  ),
-                  width: width,
-                  child: Column(
-                    mainAxisSize: MainAxisSize.max,
-                    mainAxisAlignment: MainAxisAlignment.center,
-                    crossAxisAlignment: CrossAxisAlignment.start,
-                    children: [
-                      Text(
-                        album.albumName.overflow,
-                        style: Theme.of(context).textTheme.headline2?.copyWith(
-                              fontSize: isMobile ? 18.0 : null,
-                              fontWeight: isMobile ? FontWeight.w700 : null,
-                            ),
-                        textAlign: TextAlign.left,
-                        maxLines: 1,
-                        overflow: TextOverflow.ellipsis,
-                      ),
-                      Padding(
-                        padding: EdgeInsets.only(top: 2),
-                        child: Text(
-                          [
-                            if (album.albumArtistName.isNotEmpty)
-                              album.albumArtistName.overflow,
-                            if (album.year.isNotEmpty) album.year.overflow,
-                          ].join(' • '),
-                          style: isDesktop
-                              ? Theme.of(context).textTheme.headline3?.copyWith(
-                                    fontSize: 12.0,
-                                  )
-                              : Theme.of(context).textTheme.headline3,
-                          maxLines: 1,
-                          textAlign: TextAlign.left,
-                          overflow: TextOverflow.ellipsis,
-                        ),
-                      ),
-                    ],
-                  ),
-                ),
-              ),
-            ],
-          ),
-        ),
-      ),
-    );
-  }
-}
-
-class WebAlbumTile extends StatelessWidget {
-  final Album album;
-  const WebAlbumTile({
-    Key? key,
-    required this.album,
-  }) : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    return Material(
-      color: Colors.transparent,
-      child: InkWell(
-        onTap: () async {
-          if (album.tracks.isEmpty) {
-            await Future.wait([
-              YTMClient.album(album),
-              precacheImage(
-                ExtendedNetworkImageProvider(album.thumbnails.values.last,
-                    cache: true),
-                context,
-              ),
-            ]);
-          }
-          Navigator.of(context).push(
-            PageRouteBuilder(
-              pageBuilder: (context, animation, secondaryAnimation) =>
-                  FadeThroughTransition(
-                fillColor: Colors.transparent,
-                animation: animation,
-                secondaryAnimation: secondaryAnimation,
-                child: WebAlbumScreen(
-                  album: album,
-                ),
-              ),
-            ),
-          );
-        },
-        child: Column(
-          mainAxisAlignment: MainAxisAlignment.center,
-          children: [
-            Container(
-              height: 64.0,
-              alignment: Alignment.center,
-              margin: const EdgeInsets.symmetric(vertical: 4.0),
-              child: Row(
-                crossAxisAlignment: CrossAxisAlignment.center,
-                children: [
-                  const SizedBox(width: 12.0),
-                  ExtendedImage(
-                    image: NetworkImage(
-                      album.thumbnails.values.first,
-                    ),
-                    height: 56.0,
-                    width: 56.0,
-                  ),
-                  const SizedBox(width: 12.0),
-                  Expanded(
-                    child: Column(
-                      mainAxisSize: MainAxisSize.max,
-                      mainAxisAlignment: MainAxisAlignment.center,
-                      crossAxisAlignment: CrossAxisAlignment.start,
-                      children: [
-                        Text(
-                          album.albumName.overflow,
-                          overflow: TextOverflow.ellipsis,
-                          maxLines: 1,
-                          style: Theme.of(context).textTheme.headline2,
-                        ),
-                        const SizedBox(
-                          height: 2.0,
-                        ),
-                        Text(
-                          [
-                            Language.instance.ALBUM_SINGLE,
-                            if (album.albumArtistName.isNotEmpty)
-                              album.albumArtistName,
-                            if (album.year.isNotEmpty) album.year
-                          ].join(' • '),
-                          overflow: TextOverflow.ellipsis,
-                          maxLines: 1,
-                          style: Theme.of(context).textTheme.headline3,
-                        ),
-                      ],
-                    ),
-                  ),
-                  const SizedBox(width: 12.0),
-                  Container(
-                    width: 64.0,
-                    height: 64.0,
-                  ),
-                ],
-              ),
-            ),
-            const Divider(
-              height: 1.0,
-              indent: 80.0,
-            ),
-          ],
-        ),
-      ),
-    );
-  }
-}
-
-class WebAlbumScreen extends StatefulWidget {
-  final Album album;
-  const WebAlbumScreen({
-    Key? key,
-    required this.album,
-  }) : super(key: key);
-  WebAlbumScreenState createState() => WebAlbumScreenState();
-}
-
-class WebAlbumScreenState extends State<WebAlbumScreen>
-    with SingleTickerProviderStateMixin {
-  Color? color;
-  double elevation = 0.0;
-  ScrollController controller =
-      ScrollController(initialScrollOffset: isMobile ? 96.0 : 0.0);
-  Color? secondary;
-  int? hovered;
-  bool reactToSecondaryPress = false;
-  bool detailsVisible = false;
-  bool detailsLoaded = false;
-  ScrollPhysics? physics = NeverScrollableScrollPhysics();
-
-  bool isDark(BuildContext context) =>
-      (0.299 *
-              (color?.red ??
-                  (Theme.of(context).brightness == Brightness.dark
-                      ? 0.0
-                      : 255.0))) +
-          (0.587 *
-              (color?.green ??
-                  (Theme.of(context).brightness == Brightness.dark
-                      ? 0.0
-                      : 255.0))) +
-          (0.114 *
-              (color?.blue ??
-                  (Theme.of(context).brightness == Brightness.dark
-                      ? 0.0
-                      : 255.0))) <
-      128.0;
-
-  @override
-  void initState() {
-    super.initState();
-    widget.album.tracks.sort(
-        (first, second) => first.trackNumber.compareTo(second.trackNumber));
-    if (isDesktop) {
-      Timer(
-        Duration(milliseconds: 300),
-        () {
-          PaletteGenerator.fromImageProvider(
-            ResizeImage.resizeIfNeeded(
-              100,
-              100,
-              ExtendedNetworkImageProvider(
-                widget.album.thumbnails.values.first,
-                cache: true,
-              ),
-            ),
-          ).then((palette) {
-            setState(() {
-              if (palette.colors != null) {
-                color = palette.colors!.first;
-              }
-            });
-          });
-        },
-      );
-      controller.addListener(() {
-        if (controller.offset.isZero) {
-          setState(() {
-            elevation = 0.0;
-          });
-        } else if (elevation == 0.0) {
-          setState(() {
-            elevation = 4.0;
-          });
-        }
-      });
-    }
-    if (isMobile) {
-      PaletteGenerator.fromImageProvider(
-        ResizeImage.resizeIfNeeded(
-          100,
-          100,
-          ExtendedNetworkImageProvider(
-            widget.album.thumbnails.values.first,
-            cache: true,
-          ),
-        ),
-      ).then((palette) {
-        setState(() {
-          if (palette.colors != null) {
-            color = palette.colors!.first;
-            secondary = palette.colors!.last;
-          }
-        });
-      });
-      Timer(Duration(milliseconds: 100), () {
-        this
-            .controller
-            .animateTo(
-              0.0,
-              duration: Duration(milliseconds: 300),
-              curve: Curves.easeInOut,
-            )
-            .then((_) {
-          Timer(Duration(milliseconds: 50), () {
-            setState(() {
-              detailsLoaded = true;
-              physics = null;
-            });
-          });
-        });
-      });
-      controller.addListener(() {
-        if (controller.offset < 36.0) {
-          if (!detailsVisible) {
-            setState(() {
-              detailsVisible = true;
-            });
-          }
-        } else if (detailsVisible) {
-          setState(() {
-            detailsVisible = false;
-          });
-        }
-      });
-    }
-  }
-
-  @override
-  void dispose() {
-    controller.dispose();
-    super.dispose();
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    const mobileSliverLabelHeight = 116.0;
-    double mobileSliverContentHeight = MediaQuery.of(context).size.width;
-    double mobileSliverExpandedHeight = mobileSliverContentHeight -
-        MediaQuery.of(context).padding.top +
-        mobileSliverLabelHeight;
-    double mobileSliverFABYPos = mobileSliverContentHeight - 32.0;
-    if (mobileSliverExpandedHeight >
-        MediaQuery.of(context).size.height * 3 / 5) {
-      mobileSliverExpandedHeight = MediaQuery.of(context).size.height * 3 / 5;
-      mobileSliverContentHeight = mobileSliverExpandedHeight -
-          mobileSliverLabelHeight +
-          MediaQuery.of(context).padding.top;
-      mobileSliverFABYPos = mobileSliverContentHeight - 32.0;
-    }
-    return isDesktop
-        ? Scaffold(
-            body: Container(
-              height: MediaQuery.of(context).size.height,
-              child: Stack(
-                children: [
-                  CustomListView(
-                    controller: controller,
-                    padding: EdgeInsets.only(
-                        top: desktopTitleBarHeight + kDesktopAppBarHeight),
-                    children: [
-                      TweenAnimationBuilder(
-                        tween: ColorTween(
-                          begin: Theme.of(context).appBarTheme.backgroundColor,
-                          end: color == null
-                              ? Theme.of(context).appBarTheme.backgroundColor
-                              : color!,
-                        ),
-                        curve: Curves.easeOut,
-                        duration: Duration(
-                          milliseconds: 300,
-                        ),
-                        builder: (context, color, _) => Column(
-                          mainAxisSize: MainAxisSize.min,
-                          children: [
-                            Transform.translate(
-                              offset: Offset(0, -8.0),
-                              child: Material(
-                                color: color as Color? ?? Colors.transparent,
-                                elevation: elevation == 0.0 ? 4.0 : 0.0,
-                                borderRadius: BorderRadius.zero,
-                                child: Container(
-                                  height: 312.0,
-                                  child: Row(
-                                    children: [
-                                      const SizedBox(width: 56.0),
-                                      Padding(
-                                        padding: EdgeInsets.all(20.0),
-                                        child: Hero(
-                                          tag:
-                                              'album_art_${widget.album.albumName}_${widget.album.year}_${widget.album.id}',
-                                          child: Card(
-                                            color: Colors.white,
-                                            elevation: 4.0,
-                                            child: Stack(
-                                              alignment: Alignment.center,
-                                              children: [
-                                                Padding(
-                                                  padding: EdgeInsets.all(8.0),
-                                                  child: ExtendedImage(
-                                                    image:
-                                                        ExtendedNetworkImageProvider(
-                                                            widget
-                                                                .album
-                                                                .thumbnails
-                                                                .values
-                                                                .last,
-                                                            cache: true),
-                                                    height: 256.0,
-                                                    width: 256.0,
-                                                    fit: BoxFit.cover,
-                                                  ),
-                                                ),
-                                              ],
-                                            ),
-                                          ),
-                                        ),
-                                      ),
-                                      Expanded(
-                                        child: Padding(
-                                          padding: EdgeInsets.symmetric(
-                                              vertical: 20.0),
-                                          child: Column(
-                                            crossAxisAlignment:
-                                                CrossAxisAlignment.start,
-                                            mainAxisAlignment:
-                                                MainAxisAlignment.center,
-                                            children: [
-                                              Text(
-                                                widget.album.albumName,
-                                                style: Theme.of(context)
-                                                    .textTheme
-                                                    .headline1
-                                                    ?.copyWith(
-                                                      fontSize: 24.0,
-                                                      color: isDark(context)
-                                                          ? Colors.white
-                                                          : Colors.black,
-                                                    ),
-                                                maxLines: 1,
-                                                overflow: TextOverflow.ellipsis,
-                                              ),
-                                              SizedBox(height: 8.0),
-                                              Text(
-                                                '${widget.album.subtitle}\n${widget.album.secondSubtitle}',
-                                                style: Theme.of(context)
-                                                    .textTheme
-                                                    .headline3
-                                                    ?.copyWith(
-                                                      color: isDark(context)
-                                                          ? Colors.white70
-                                                          : Colors.black87,
-                                                    ),
-                                                maxLines: 2,
-                                                overflow: TextOverflow.ellipsis,
-                                              ),
-                                              SizedBox(height: 8.0),
-                                              Expanded(
-                                                child: CustomListView(
-                                                  padding: EdgeInsets.only(
-                                                      right: 8.0),
-                                                  children: [
-                                                    if (widget.album.description
-                                                        .isNotEmpty)
-                                                      ReadMoreText(
-                                                        '${widget.album.description}',
-                                                        trimLines: 6,
-                                                        trimMode: TrimMode.Line,
-                                                        trimExpandedText:
-                                                            Language
-                                                                .instance.LESS,
-                                                        trimCollapsedText:
-                                                            Language
-                                                                .instance.MORE,
-                                                        colorClickableText:
-                                                            Theme.of(context)
-                                                                .primaryColor,
-                                                        style: Theme.of(context)
-                                                            .textTheme
-                                                            .headline3
-                                                            ?.copyWith(
-                                                              color: isDark(
-                                                                      context)
-                                                                  ? Colors
-                                                                      .white70
-                                                                  : Colors
-                                                                      .black87,
-                                                            ),
-                                                      ),
-                                                    const SizedBox(
-                                                        height: 12.0),
-                                                    ButtonBar(
-                                                      buttonPadding:
-                                                          EdgeInsets.symmetric(
-                                                              horizontal: 8.0),
-                                                      alignment:
-                                                          MainAxisAlignment
-                                                              .start,
-                                                      children: [
-                                                        ElevatedButton.icon(
-                                                          onPressed: () {
-                                                            Web.instance.open(
-                                                                widget.album
-                                                                    .tracks);
-                                                          },
-                                                          style: ButtonStyle(
-                                                            elevation:
-                                                                MaterialStateProperty
-                                                                    .all(0.0),
-                                                            backgroundColor:
-                                                                MaterialStateProperty
-                                                                    .all(isDark(
-                                                                            context)
-                                                                        ? Colors
-                                                                            .white
-                                                                        : Colors
-                                                                            .black87),
-                                                            padding: MaterialStateProperty
-                                                                .all(EdgeInsets
-                                                                    .all(12.0)),
-                                                          ),
-                                                          icon: Icon(
-                                                            Icons.play_arrow,
-                                                            color: !isDark(
-                                                                    context)
-                                                                ? Colors.white
-                                                                : Colors
-                                                                    .black87,
-                                                          ),
-                                                          label: Text(
-                                                            Language.instance
-                                                                .PLAY_NOW
-                                                                .toUpperCase(),
-                                                            style: TextStyle(
-                                                              fontSize: 12.0,
-                                                              color: !isDark(
-                                                                      context)
-                                                                  ? Colors.white
-                                                                  : Colors
-                                                                      .black87,
-                                                              letterSpacing:
-                                                                  -0.1,
-                                                            ),
-                                                          ),
-                                                        ),
-                                                        OutlinedButton.icon(
-                                                          onPressed: () {
-                                                            Collection.instance
-                                                                .playlistCreate(
-                                                              media.Playlist(
-                                                                id: widget
-                                                                    .album
-                                                                    .albumName
-                                                                    .hashCode,
-                                                                name: widget
-                                                                    .album
-                                                                    .albumName,
-                                                              )..tracks.addAll(widget
-                                                                  .album.tracks
-                                                                  .map((e) => media
-                                                                          .Track
-                                                                      .fromWebTrack(
-                                                                          e.toJson()))),
-                                                            );
-                                                          },
-                                                          style: OutlinedButton
-                                                              .styleFrom(
-                                                            // ignore: deprecated_member_use
-                                                            primary:
-                                                                Colors.white,
-                                                            side: BorderSide(
-                                                                color: isDark(
-                                                                        context)
-                                                                    ? Colors
-                                                                        .white
-                                                                    : Colors
-                                                                        .black87),
-                                                            padding:
-                                                                EdgeInsets.all(
-                                                                    12.0),
-                                                          ),
-                                                          icon: Icon(
-                                                            Icons.playlist_add,
-                                                            color: isDark(
-                                                                    context)
-                                                                ? Colors.white
-                                                                : Colors
-                                                                    .black87,
-                                                          ),
-                                                          label: Text(
-                                                            Language.instance
-                                                                .SAVE_AS_PLAYLIST
-                                                                .toUpperCase(),
-                                                            style: TextStyle(
-                                                              fontSize: 12.0,
-                                                              color: isDark(
-                                                                      context)
-                                                                  ? Colors.white
-                                                                  : Colors
-                                                                      .black87,
-                                                              letterSpacing:
-                                                                  -0.1,
-                                                            ),
-                                                          ),
-                                                        ),
-                                                        OutlinedButton.icon(
-                                                          onPressed: () {
-                                                            launchUrl(
-                                                              Uri.parse(
-                                                                  'https://music.youtube.com/browse/${widget.album.id}'),
-                                                              mode: LaunchMode
-                                                                  .externalApplication,
-                                                            );
-                                                          },
-                                                          style: OutlinedButton
-                                                              .styleFrom(
-                                                            // ignore: deprecated_member_use
-                                                            primary:
-                                                                Colors.white,
-                                                            side: BorderSide(
-                                                                color: isDark(
-                                                                        context)
-                                                                    ? Colors
-                                                                        .white
-                                                                    : Colors
-                                                                        .black87),
-                                                            padding:
-                                                                EdgeInsets.all(
-                                                                    12.0),
-                                                          ),
-                                                          icon: Icon(
-                                                            Icons.open_in_new,
-                                                            color: isDark(
-                                                                    context)
-                                                                ? Colors.white
-                                                                : Colors
-                                                                    .black87,
-                                                          ),
-                                                          label: Text(
-                                                            Language.instance
-                                                                .OPEN_IN_BROWSER
-                                                                .toUpperCase(),
-                                                            style: TextStyle(
-                                                              fontSize: 12.0,
-                                                              color: isDark(
-                                                                      context)
-                                                                  ? Colors.white
-                                                                  : Colors
-                                                                      .black87,
-                                                              letterSpacing:
-                                                                  -0.1,
-                                                            ),
-                                                          ),
-                                                        ),
-                                                      ],
-                                                    ),
-                                                  ],
-                                                ),
-                                              ),
-                                            ],
-                                          ),
-                                        ),
-                                      ),
-                                      const SizedBox(width: 56.0),
-                                    ],
-                                  ),
-                                ),
-                              ),
-                            ),
-                            ...widget.album.tracks.map(
-                              (e) => WebTrackTile(
-                                track: e,
-                                group: widget.album.tracks,
-                              ),
-                            ),
-                          ],
-                        ),
-                      ),
-                    ],
-                  ),
-                  TweenAnimationBuilder(
-                    tween: ColorTween(
-                      begin: Theme.of(context).appBarTheme.backgroundColor,
-                      end: color == null
-                          ? Theme.of(context).appBarTheme.backgroundColor
-                          : color!,
-                    ),
-                    curve: Curves.easeOut,
-                    duration: Duration(
-                      milliseconds: 300,
-                    ),
-                    builder: (context, color, _) => Theme(
-                      data: createTheme(
-                        color: isDark(context)
-                            ? kPrimaryDarkColor
-                            : kPrimaryLightColor,
-                        themeMode:
-                            isDark(context) ? ThemeMode.dark : ThemeMode.light,
-                      ),
-                      child: DesktopAppBar(
-                        elevation: elevation,
-                        color: color as Color? ?? Colors.transparent,
-                        child: Row(
-                          children: [
-                            Text(
-                              elevation != 0.0 ? widget.album.albumName : '',
-                              style: Theme.of(context)
-                                  .textTheme
-                                  .headline1
-                                  ?.copyWith(
-                                    color: isDark(context)
-                                        ? Colors.white
-                                        : Colors.black,
-                                  ),
-                            ),
-                            Spacer(),
-                            WebSearchBar(),
-                            SizedBox(
-                              width: 8.0,
-                            ),
-                            Material(
-                              color: Colors.transparent,
-                              child: Tooltip(
-                                message: Language.instance.SETTING,
-                                child: InkWell(
-                                  onTap: () {
-                                    Navigator.of(context).push(
-                                      PageRouteBuilder(
-                                        pageBuilder: (context, animation,
-                                                secondaryAnimation) =>
-                                            FadeThroughTransition(
-                                          fillColor: Colors.transparent,
-                                          animation: animation,
-                                          secondaryAnimation:
-                                              secondaryAnimation,
-                                          child: Settings(),
-                                        ),
-                                      ),
-                                    );
-                                  },
-                                  borderRadius: BorderRadius.circular(20.0),
-                                  child: Container(
-                                    height: 40.0,
-                                    width: 40.0,
-                                    child: Icon(
-                                      Icons.settings,
-                                      size: 20.0,
-                                      color: isDark(context)
-                                          ? Theme.of(context)
-                                              .extension<IconColors>()
-                                              ?.appBarActionDarkIconColor
-                                          : Theme.of(context)
-                                              .extension<IconColors>()
-                                              ?.appBarActionLightIconColor,
-                                    ),
-                                  ),
-                                ),
-                              ),
-                            ),
-                            SizedBox(
-                              width: 16.0,
-                            ),
-                          ],
-                        ),
-                      ),
-                    ),
-                  ),
-                ],
-              ),
-            ),
-          )
-        : Scaffold(
-            body: Stack(
-              children: [
-                NowPlayingBarScrollHideNotifier(
-                  child: CustomScrollView(
-                    physics: physics,
-                    controller: controller,
-                    slivers: [
-                      SliverAppBar(
-                        systemOverlayStyle: SystemUiOverlayStyle(
-                          statusBarColor: Colors.transparent,
-                          statusBarIconBrightness: Brightness.light,
-                        ),
-                        expandedHeight: mobileSliverExpandedHeight,
-                        pinned: true,
-                        leading: IconButton(
-                          onPressed: Navigator.of(context).maybePop,
-                          icon: Icon(
-                            Icons.arrow_back,
-                            color: Theme.of(context)
-                                .extension<IconColors>()
-                                ?.appBarDarkIconColor,
-                          ),
-                          iconSize: 24.0,
-                          splashRadius: 20.0,
-                        ),
-                        actions: [
-                          IconButton(
-                            onPressed: () {
-                              Navigator.of(context).push(PageRouteBuilder(
-                                  pageBuilder: (context, animation,
-                                          secondaryAnimation) =>
-                                      FadeThroughTransition(
-                                          fillColor: Colors.transparent,
-                                          animation: animation,
-                                          secondaryAnimation:
-                                              secondaryAnimation,
-                                          child:
-                                              FloatingSearchBarWebSearchScreen())));
-                            },
-                            icon: Icon(
-                              Icons.search,
-                              color: Theme.of(context)
-                                  .extension<IconColors>()
-                                  ?.appBarActionDarkIconColor,
-                            ),
-                            iconSize: 24.0,
-                            splashRadius: 20.0,
-                          ),
-                          WebMobileAppBarOverflowButton(),
-                          const SizedBox(width: 8.0),
-                        ],
-                        forceElevated: true,
-                        title: TweenAnimationBuilder<double>(
-                          tween: Tween<double>(
-                            begin: 1.0,
-                            end: detailsVisible ? 0.0 : 1.0,
-                          ),
-                          duration: Duration(milliseconds: 200),
-                          builder: (context, value, _) => Opacity(
-                            opacity: value,
-                            child: Text(
-                              widget.album.albumName.overflow,
-                              style: Theme.of(context)
-                                  .textTheme
-                                  .headline6
-                                  ?.copyWith(
-                                    color: Colors.white,
-                                  ),
-                              maxLines: 1,
-                              overflow: TextOverflow.ellipsis,
-                            ),
-                          ),
-                        ),
-                        backgroundColor: Colors.grey.shade900,
-                        flexibleSpace: Stack(
-                          children: [
-                            FlexibleSpaceBar(
-                              background: Column(
-                                children: [
-                                  Stack(
-                                    children: [
-                                      ExtendedImage.network(
-                                        widget.album.thumbnails.values.last,
-                                        fit: BoxFit.cover,
-                                        width:
-                                            MediaQuery.of(context).size.width,
-                                        height: mobileSliverContentHeight,
-                                        enableLoadState: true,
-                                        enableMemoryCache: false,
-                                        cache: true,
-                                        loadStateChanged:
-                                            (ExtendedImageState state) {
-                                          return state.extendedImageLoadState ==
-                                                  LoadState.completed
-                                              ? TweenAnimationBuilder(
-                                                  tween: Tween<double>(
-                                                      begin: 0.0, end: 1.0),
-                                                  duration: const Duration(
-                                                      milliseconds: 800),
-                                                  child: state.completedWidget,
-                                                  builder:
-                                                      (context, value, child) =>
-                                                          Opacity(
-                                                    opacity: value as double,
-                                                    child:
-                                                        state.completedWidget,
-                                                  ),
-                                                )
-                                              : SizedBox.shrink();
-                                        },
-                                      ),
-                                      Positioned.fill(
-                                        child: Container(
-                                          decoration: BoxDecoration(
-                                            gradient: LinearGradient(
-                                              colors: [
-                                                Colors.black26,
-                                                Colors.transparent,
-                                              ],
-                                              begin: Alignment.topCenter,
-                                              end: Alignment.bottomCenter,
-                                              stops: [
-                                                0.0,
-                                                0.5,
-                                              ],
-                                            ),
-                                          ),
-                                        ),
-                                      ),
-                                    ],
-                                  ),
-                                  TweenAnimationBuilder<double>(
-                                    tween: Tween<double>(
-                                      begin: 1.0,
-                                      end: detailsVisible ? 1.0 : 0.0,
-                                    ),
-                                    duration: Duration(milliseconds: 200),
-                                    builder: (context, value, _) => Opacity(
-                                      opacity: value,
-                                      child: GestureDetector(
-                                        onTap: () {
-                                          if (widget
-                                              .album.description.isNotEmpty) {
-                                            showDialog(
-                                              context: context,
-                                              builder: (context) => AlertDialog(
-                                                title: Text(
-                                                    widget.album.albumName),
-                                                contentPadding:
-                                                    EdgeInsets.only(top: 20.0),
-                                                content: Column(
-                                                  mainAxisSize:
-                                                      MainAxisSize.min,
-                                                  children: [
-                                                    const Divider(
-                                                      height: 1.0,
-                                                      thickness: 1.0,
-                                                    ),
-                                                    ConstrainedBox(
-                                                      constraints:
-                                                          BoxConstraints(
-                                                        maxHeight: 360.0,
-                                                      ),
-                                                      child:
-                                                          SingleChildScrollView(
-                                                        padding: EdgeInsets
-                                                            .symmetric(
-                                                          horizontal: 24.0,
-                                                          vertical: 16.0,
-                                                        ),
-                                                        child: Text(
-                                                          widget.album
-                                                              .description,
-                                                          style:
-                                                              Theme.of(context)
-                                                                  .textTheme
-                                                                  .headline3,
-                                                        ),
-                                                      ),
-                                                    ),
-                                                    const Divider(
-                                                      height: 1.0,
-                                                      thickness: 1.0,
-                                                    ),
-                                                  ],
-                                                ),
-                                                actions: [
-                                                  TextButton(
-                                                    onPressed:
-                                                        Navigator.of(context)
-                                                            .pop,
-                                                    child: Text(
-                                                      Language.instance.OK,
-                                                    ),
-                                                  ),
-                                                ],
-                                              ),
-                                            );
-                                          }
-                                        },
-                                        child: Container(
-                                          color: Colors.grey.shade900,
-                                          height: mobileSliverLabelHeight,
-                                          width:
-                                              MediaQuery.of(context).size.width,
-                                          padding: EdgeInsets.symmetric(
-                                              horizontal: 16.0),
-                                          child: Column(
-                                            mainAxisSize: MainAxisSize.max,
-                                            mainAxisAlignment:
-                                                MainAxisAlignment.center,
-                                            crossAxisAlignment:
-                                                CrossAxisAlignment.start,
-                                            children: [
-                                              Text(
-                                                widget.album.albumName,
-                                                style: Theme.of(context)
-                                                    .textTheme
-                                                    .headline6
-                                                    ?.copyWith(
-                                                      color: Colors.white,
-                                                      fontSize: 24.0,
-                                                    ),
-                                                maxLines: 1,
-                                                overflow: TextOverflow.ellipsis,
-                                              ),
-                                              const SizedBox(height: 8.0),
-                                              Text(
-                                                widget.album.description,
-                                                overflow: TextOverflow.ellipsis,
-                                                maxLines: 2,
-                                                style: Theme.of(context)
-                                                    .textTheme
-                                                    .headline3
-                                                    ?.copyWith(
-                                                      color: Colors.white70,
-                                                    ),
-                                              ),
-                                            ],
-                                          ),
-                                        ),
-                                      ),
-                                    ),
-                                  ),
-                                ],
-                              ),
-                            ),
-                            Positioned(
-                              top: mobileSliverFABYPos,
-                              right: 16.0 + 64.0,
-                              child: TweenAnimationBuilder(
-                                curve: Curves.easeOut,
-                                tween: Tween<double>(
-                                    begin: 0.0,
-                                    end: detailsVisible && secondary != null
-                                        ? 1.0
-                                        : 0.0),
-                                duration: Duration(milliseconds: 200),
-                                builder: (context, value, _) => Transform.scale(
-                                  scale: value as double,
-                                  child: Transform.rotate(
-                                    angle: value * pi + pi,
-                                    child: FloatingActionButton(
-                                      heroTag: Random().nextInt(1 << 32),
-                                      backgroundColor: secondary,
-                                      foregroundColor: [
-                                        Colors.white,
-                                        Color(0xFF212121)
-                                      ][(secondary?.computeLuminance() ?? 0.0) >
-                                              0.5
-                                          ? 1
-                                          : 0],
-                                      child: Icon(Icons.share),
-                                      onPressed: () {
-                                        Share.share(
-                                            'https://music.youtube.com/browse/${widget.album.id}');
-                                      },
-                                    ),
-                                  ),
-                                ),
-                              ),
-                            ),
-                            Positioned(
-                              top: mobileSliverFABYPos,
-                              right: 16.0,
-                              child: TweenAnimationBuilder(
-                                curve: Curves.easeOut,
-                                tween: Tween<double>(
-                                    begin: 0.0,
-                                    end: detailsVisible && secondary != null
-                                        ? 1.0
-                                        : 0.0),
-                                duration: Duration(milliseconds: 200),
-                                builder: (context, value, _) => Transform.scale(
-                                  scale: value as double,
-                                  child: Transform.rotate(
-                                    angle: value * pi + pi,
-                                    child: FloatingActionButton(
-                                      heroTag: Random().nextInt(1 << 32),
-                                      backgroundColor: secondary,
-                                      foregroundColor: [
-                                        Colors.white,
-                                        Color(0xFF212121)
-                                      ][(secondary?.computeLuminance() ?? 0.0) >
-                                              0.5
-                                          ? 1
-                                          : 0],
-                                      child: Icon(Icons.shuffle),
-                                      onPressed: () {
-                                        Web.instance.open(widget.album.tracks);
-                                      },
-                                    ),
-                                  ),
-                                ),
-                              ),
-                            ),
-                          ],
-                        ),
-                      ),
-                      SliverPadding(
-                        padding: EdgeInsets.only(
-                          top: 20.0,
-                        ),
-                      ),
-                      SliverList(
-                        delegate: SliverChildListDelegate([
-                          ...widget.album.tracks.map(
-                            (e) => WebTrackTile(
-                              track: e,
-                              group: widget.album.tracks,
-                            ),
-                          ),
-                        ]),
-                      ),
-                      SliverPadding(
-                        padding: EdgeInsets.only(
-                          top: 20.0,
-                        ),
-                      ),
-                    ],
-                  ),
-                ),
-              ],
-            ),
-          );
-  }
-}
diff --git a/lib/web/artist.dart b/lib/web/artist.dart
deleted file mode 100644
index 17ef1ae..0000000
--- a/lib/web/artist.dart
+++ /dev/null
@@ -1,1279 +0,0 @@
-/// This file is a part of Harmonoid (https://github.com/harmonoid/harmonoid).
-///
-/// Copyright © 2020-2022, Hitesh Kumar Saini <saini123hitesh@gmail.com>.
-/// All rights reserved.
-///
-/// Use of this source code is governed by the End-User License Agreement for Harmonoid that can be found in the EULA.txt file.
-///
-import 'dart:async';
-import 'dart:math';
-
-import 'package:animations/animations.dart';
-import 'package:flutter/material.dart';
-import 'package:flutter/services.dart';
-import 'package:readmore/readmore.dart';
-import 'package:share_plus/share_plus.dart';
-import 'package:auto_size_text/auto_size_text.dart';
-import 'package:url_launcher/url_launcher.dart';
-import 'package:ytm_client/ytm_client.dart';
-import 'package:extended_image/extended_image.dart';
-
-import 'package:harmonoid/constants/language.dart';
-import 'package:harmonoid/utils/dimensions.dart';
-import 'package:harmonoid/utils/widgets.dart';
-import 'package:harmonoid/utils/rendering.dart';
-import 'package:harmonoid/utils/theme.dart';
-import 'package:harmonoid/utils/palette_generator.dart';
-import 'package:harmonoid/web/album.dart';
-import 'package:harmonoid/web/state/web.dart';
-import 'package:harmonoid/web/track.dart';
-import 'package:harmonoid/web/video.dart';
-import 'package:harmonoid/web/playlist.dart';
-import 'package:harmonoid/web/utils/widgets.dart';
-import 'package:harmonoid/web/web.dart';
-import 'package:harmonoid/interface/settings/settings.dart';
-
-class WebArtistLargeTile extends StatelessWidget {
-  final double height;
-  final double width;
-  final Artist artist;
-  const WebArtistLargeTile({
-    Key? key,
-    required this.height,
-    required this.width,
-    required this.artist,
-  }) : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    return Container(
-      height: height,
-      width: width,
-      child: Column(
-        crossAxisAlignment: CrossAxisAlignment.center,
-        mainAxisSize: MainAxisSize.max,
-        children: [
-          Card(
-            clipBehavior: Clip.antiAlias,
-            margin: EdgeInsets.zero,
-            elevation: 4.0,
-            shape: RoundedRectangleBorder(
-              borderRadius: BorderRadius.circular(
-                width / 2.0,
-              ),
-            ),
-            child: Stack(
-              alignment: Alignment.center,
-              children: [
-                Hero(
-                  tag: 'artist_art_${artist.id}',
-                  child: ClipOval(
-                    child: ExtendedImage(
-                      image: ExtendedNetworkImageProvider(
-                          artist.thumbnails.values.first),
-                      height: width - 8.0,
-                      width: width - 8.0,
-                    ),
-                  ),
-                ),
-                Material(
-                  shape: RoundedRectangleBorder(
-                    borderRadius: BorderRadius.circular(
-                      width / 2.0,
-                    ),
-                  ),
-                  color: Colors.transparent,
-                  child: InkWell(
-                    onTap: () async {
-                      if (artist.data.isEmpty) {
-                        await YTMClient.artist(artist);
-                      }
-                      Navigator.of(context).push(
-                        PageRouteBuilder(
-                          pageBuilder:
-                              (context, animation, secondaryAnimation) =>
-                                  FadeThroughTransition(
-                            fillColor: Colors.transparent,
-                            animation: animation,
-                            secondaryAnimation: secondaryAnimation,
-                            child: WebArtistScreen(
-                              artist: artist,
-                            ),
-                          ),
-                        ),
-                      );
-                    },
-                    child: Container(
-                      height: width,
-                      width: width,
-                      padding: EdgeInsets.all(4.0),
-                    ),
-                  ),
-                ),
-              ],
-            ),
-          ),
-          Spacer(),
-          Text(
-            artist.artistName.overflow,
-            style: Theme.of(context).textTheme.headline2,
-            textAlign: TextAlign.left,
-            maxLines: 1,
-            overflow: TextOverflow.ellipsis,
-          ),
-        ],
-      ),
-    );
-  }
-}
-
-class WebArtistTile extends StatelessWidget {
-  final Artist artist;
-
-  const WebArtistTile({
-    Key? key,
-    required this.artist,
-  }) : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    return Material(
-      color: Colors.transparent,
-      child: InkWell(
-        onTap: () async {
-          if (artist.data.isEmpty) {
-            await YTMClient.artist(artist);
-          }
-          Navigator.of(context).push(
-            PageRouteBuilder(
-              pageBuilder: (context, animation, secondaryAnimation) =>
-                  FadeThroughTransition(
-                fillColor: Colors.transparent,
-                animation: animation,
-                secondaryAnimation: secondaryAnimation,
-                child: WebArtistScreen(
-                  artist: artist,
-                ),
-              ),
-            ),
-          );
-        },
-        child: Column(
-          mainAxisAlignment: MainAxisAlignment.center,
-          children: [
-            Container(
-              height: 64.0,
-              alignment: Alignment.center,
-              margin: const EdgeInsets.symmetric(vertical: 4.0),
-              child: Row(
-                crossAxisAlignment: CrossAxisAlignment.center,
-                children: [
-                  const SizedBox(width: 12.0),
-                  Hero(
-                    tag: 'artist_art_${artist.id}',
-                    child: Card(
-                      clipBehavior: Clip.antiAlias,
-                      shape: RoundedRectangleBorder(
-                        borderRadius: BorderRadius.circular(28.0),
-                      ),
-                      child: Padding(
-                        padding: EdgeInsets.all(2.0),
-                        child: artist.thumbnails.isNotEmpty
-                            ? ClipOval(
-                                child: ExtendedImage(
-                                  image: NetworkImage(
-                                    artist.thumbnails.values.first,
-                                  ),
-                                  height: 52.0,
-                                  width: 52.0,
-                                ),
-                              )
-                            : SizedBox.square(
-                                dimension: 52.0,
-                              ),
-                      ),
-                    ),
-                  ),
-                  const SizedBox(width: 12.0),
-                  Expanded(
-                    child: Column(
-                      mainAxisSize: MainAxisSize.max,
-                      mainAxisAlignment: MainAxisAlignment.center,
-                      crossAxisAlignment: CrossAxisAlignment.start,
-                      children: [
-                        Text(
-                          artist.artistName.overflow,
-                          overflow: TextOverflow.ellipsis,
-                          maxLines: 1,
-                          style: Theme.of(context).textTheme.headline2,
-                        ),
-                        const SizedBox(
-                          height: 2.0,
-                        ),
-                        Text(
-                          artist.subscribersCount,
-                          overflow: TextOverflow.ellipsis,
-                          maxLines: 1,
-                          style: Theme.of(context).textTheme.headline3,
-                        ),
-                      ],
-                    ),
-                  ),
-                  const SizedBox(width: 12.0),
-                  Container(
-                    width: 64.0,
-                    height: 64.0,
-                  ),
-                ],
-              ),
-            ),
-            const Divider(
-              height: 1.0,
-              indent: 80.0,
-            ),
-          ],
-        ),
-      ),
-    );
-  }
-}
-
-class WebArtistScreen extends StatefulWidget {
-  final Artist artist;
-  WebArtistScreen({
-    Key? key,
-    required this.artist,
-  }) : super(key: key);
-
-  @override
-  State<WebArtistScreen> createState() => _WebArtistScreenState();
-}
-
-class _WebArtistScreenState extends State<WebArtistScreen> {
-  final ScrollController scrollController =
-      ScrollController(initialScrollOffset: isMobile ? 96.0 : 0.0);
-  bool appBarVisible = true;
-  Color? color;
-  Color? secondary;
-  int? hovered;
-  bool reactToSecondaryPress = false;
-  bool detailsVisible = false;
-  bool detailsLoaded = false;
-  ScrollPhysics? physics = NeverScrollableScrollPhysics();
-
-  @override
-  void initState() {
-    super.initState();
-    if (isDesktop) {
-      scrollController.addListener(() {
-        if (scrollController.offset == 0.0 && !appBarVisible) {
-          setState(() {
-            appBarVisible = true;
-          });
-        } else if (appBarVisible) {
-          setState(() {
-            appBarVisible = false;
-          });
-        }
-      });
-    }
-    if (isMobile) {
-      PaletteGenerator.fromImageProvider(
-        ResizeImage.resizeIfNeeded(
-          100,
-          100,
-          ExtendedNetworkImageProvider(
-            widget.artist.thumbnails.values.first,
-            cache: true,
-          ),
-        ),
-      ).then((palette) {
-        setState(() {
-          if (palette.colors != null) {
-            color = palette.colors!.first;
-            secondary = palette.colors!.last;
-          }
-        });
-      });
-      Timer(Duration(milliseconds: 100), () {
-        this
-            .scrollController
-            .animateTo(
-              0.0,
-              duration: Duration(milliseconds: 300),
-              curve: Curves.easeInOut,
-            )
-            .then((_) {
-          Timer(Duration(milliseconds: 50), () {
-            setState(() {
-              detailsLoaded = true;
-              physics = null;
-            });
-          });
-        });
-      });
-      scrollController.addListener(() {
-        if (scrollController.offset < 36.0) {
-          if (!detailsVisible) {
-            setState(() {
-              detailsVisible = true;
-            });
-          }
-        } else if (detailsVisible) {
-          setState(() {
-            detailsVisible = false;
-          });
-        }
-      });
-    }
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    final elementsPerRow = (MediaQuery.of(context).size.width - tileMargin) ~/
-        (kAlbumTileWidth + tileMargin);
-    final double width = isMobile
-        ? (MediaQuery.of(context).size.width -
-                (elementsPerRow + 1) * tileMargin) /
-            elementsPerRow *
-            0.95
-        : kAlbumTileWidth;
-    final double height = isMobile
-        ? width * kAlbumTileHeight / kAlbumTileWidth
-        : kAlbumTileHeight;
-    const mobileSliverLabelHeight = 116.0;
-    double mobileSliverContentHeight = MediaQuery.of(context).size.width * 0.6;
-    double mobileSliverExpandedHeight = mobileSliverContentHeight -
-        MediaQuery.of(context).padding.top +
-        mobileSliverLabelHeight;
-    double mobileSliverFABYPos = mobileSliverContentHeight - 32.0;
-    if (mobileSliverExpandedHeight >
-        MediaQuery.of(context).size.height * 3 / 5) {
-      mobileSliverExpandedHeight = MediaQuery.of(context).size.height * 3 / 5;
-      mobileSliverContentHeight = mobileSliverExpandedHeight -
-          mobileSliverLabelHeight +
-          MediaQuery.of(context).padding.top;
-      mobileSliverFABYPos = mobileSliverContentHeight - 32.0;
-    }
-    return isDesktop
-        ? Scaffold(
-            body: Stack(
-              alignment: Alignment.topCenter,
-              children: [
-                NowPlayingBarScrollHideNotifier(
-                  child: CustomListView(
-                    controller: scrollController,
-                    children: [
-                      ExtendedImage.network(
-                        widget.artist.coverUrl,
-                        fit: BoxFit.cover,
-                        width: MediaQuery.of(context).size.width,
-                        enableLoadState: true,
-                        enableMemoryCache: false,
-                        cache: true,
-                        loadStateChanged: (ExtendedImageState state) {
-                          return Stack(
-                            alignment: Alignment.topLeft,
-                            children: [
-                              Positioned.fill(
-                                child: state.extendedImageLoadState ==
-                                        LoadState.completed
-                                    ? TweenAnimationBuilder(
-                                        tween:
-                                            Tween<double>(begin: 0.0, end: 1.0),
-                                        duration:
-                                            const Duration(milliseconds: 800),
-                                        child: state.completedWidget,
-                                        builder: (context, value, child) =>
-                                            Opacity(
-                                          opacity: value as double,
-                                          child: state.completedWidget,
-                                        ),
-                                      )
-                                    : SizedBox.shrink(),
-                              ),
-                              Positioned.fill(
-                                bottom: -12.0,
-                                child: Container(
-                                  decoration: BoxDecoration(
-                                    gradient: LinearGradient(
-                                      begin: Alignment.topCenter,
-                                      end: Alignment.bottomCenter,
-                                      stops: [0.35, 0.95],
-                                      colors: [
-                                        Theme.of(context)
-                                            .scaffoldBackgroundColor
-                                            .withOpacity(0.0),
-                                        Theme.of(context)
-                                            .scaffoldBackgroundColor,
-                                      ],
-                                    ),
-                                  ),
-                                ),
-                              ),
-                              Padding(
-                                padding: EdgeInsets.only(
-                                  left: 16.0,
-                                  right: 16.0,
-                                  top: 240.0,
-                                  bottom: 16.0,
-                                ),
-                                child: Column(
-                                  mainAxisSize: MainAxisSize.min,
-                                  crossAxisAlignment: isDesktop
-                                      ? CrossAxisAlignment.start
-                                      : CrossAxisAlignment.center,
-                                  children: [
-                                    AutoSizeText(
-                                      widget.artist.artistName.overflow,
-                                      style: Theme.of(context)
-                                          .textTheme
-                                          .headline1
-                                          ?.copyWith(
-                                            fontSize: 56.0,
-                                            fontWeight: isMobile
-                                                ? FontWeight.w300
-                                                : null,
-                                          ),
-                                      maxLines: 1,
-                                      overflow: TextOverflow.ellipsis,
-                                    ),
-                                    const SizedBox(height: 8.0),
-                                    Text(
-                                      widget.artist.subscribersCount
-                                          .split(' • ')
-                                          .last
-                                          .trim(),
-                                      style:
-                                          Theme.of(context).textTheme.headline3,
-                                    ),
-                                    const SizedBox(height: 8.0),
-                                    ConstrainedBox(
-                                      constraints:
-                                          BoxConstraints(maxWidth: 580.0),
-                                      child: ReadMoreText(
-                                        widget.artist.description,
-                                        trimLines: 4,
-                                        trimMode: TrimMode.Line,
-                                        trimExpandedText:
-                                            Language.instance.LESS,
-                                        trimCollapsedText:
-                                            Language.instance.MORE,
-                                        colorClickableText:
-                                            Theme.of(context).primaryColor,
-                                        style: Theme.of(context)
-                                            .textTheme
-                                            .headline3,
-                                        callback: (isTrimmed) {
-                                          setState(() {});
-                                        },
-                                      ),
-                                    ),
-                                    const SizedBox(height: 12.0),
-                                    Row(
-                                      mainAxisAlignment: isDesktop
-                                          ? MainAxisAlignment.start
-                                          : MainAxisAlignment.center,
-                                      children: [
-                                        ElevatedButton.icon(
-                                          onPressed: () {
-                                            Web.instance.open(widget.artist.data
-                                                .entries.first.value.elements
-                                                .cast<Track>());
-                                          },
-                                          style: ButtonStyle(
-                                            elevation:
-                                                MaterialStateProperty.all(0.0),
-                                            backgroundColor:
-                                                MaterialStateProperty.all(
-                                                    Theme.of(context)
-                                                                .brightness ==
-                                                            Brightness.dark
-                                                        ? Colors.white
-                                                        : Colors.black87),
-                                            padding: isDesktop
-                                                ? MaterialStateProperty.all(
-                                                    EdgeInsets.all(12.0))
-                                                : null,
-                                          ),
-                                          icon: Icon(
-                                            Icons.shuffle,
-                                            color: !(Theme.of(context)
-                                                        .brightness ==
-                                                    Brightness.dark)
-                                                ? Colors.white
-                                                : Colors.black87,
-                                          ),
-                                          label: Text(
-                                            Language.instance.SHUFFLE
-                                                .toUpperCase(),
-                                            style: TextStyle(
-                                              fontSize: 12.0,
-                                              color: !(Theme.of(context)
-                                                          .brightness ==
-                                                      Brightness.dark)
-                                                  ? Colors.white
-                                                  : Colors.black87,
-                                              letterSpacing: -0.1,
-                                            ),
-                                          ),
-                                        ),
-                                        const SizedBox(width: 8.0),
-                                        OutlinedButton.icon(
-                                          onPressed: () {
-                                            if (isDesktop) {
-                                              launchUrl(
-                                                Uri.parse(
-                                                    'https://music.youtube.com/browse/${widget.artist.id}'),
-                                                mode: LaunchMode
-                                                    .externalApplication,
-                                              );
-                                            } else {
-                                              Share.share(
-                                                  'https://music.youtube.com/browse/${widget.artist.id}');
-                                            }
-                                          },
-                                          style: OutlinedButton.styleFrom(
-                                            // ignore: deprecated_member_use
-                                            primary: Colors.white,
-                                            side: BorderSide(
-                                                color: Theme.of(context)
-                                                            .brightness ==
-                                                        Brightness.dark
-                                                    ? Colors.white
-                                                    : Colors.black87),
-                                            padding: isDesktop
-                                                ? EdgeInsets.all(12.0)
-                                                : null,
-                                          ),
-                                          icon: Icon(
-                                            isDesktop
-                                                ? Icons.open_in_new
-                                                : Icons.share,
-                                            color:
-                                                Theme.of(context).brightness ==
-                                                        Brightness.dark
-                                                    ? Colors.white
-                                                    : Colors.black87,
-                                          ),
-                                          label: Text(
-                                            isDesktop
-                                                ? Language
-                                                    .instance.OPEN_IN_BROWSER
-                                                    .toUpperCase()
-                                                : Language.instance.SHARE
-                                                    .toUpperCase(),
-                                            style: TextStyle(
-                                              fontSize: 12.0,
-                                              color: Theme.of(context)
-                                                          .brightness ==
-                                                      Brightness.dark
-                                                  ? Colors.white
-                                                  : Colors.black87,
-                                              letterSpacing: -0.1,
-                                            ),
-                                          ),
-                                        ),
-                                      ],
-                                    ),
-                                  ],
-                                ),
-                              ),
-                            ],
-                          );
-                        },
-                      ),
-                      ...widget.artist.data.entries.map(
-                        (e) => Column(
-                          crossAxisAlignment: CrossAxisAlignment.start,
-                          children: [
-                            SubHeader(e.key),
-                            if (e.value.elements.isNotEmpty &&
-                                e.value.elements.first is Track)
-                              ...e.value.elements.map(
-                                (f) => Padding(
-                                  padding: EdgeInsets.symmetric(
-                                      horizontal: isDesktop ? 16.0 : 0.0),
-                                  child: WebTrackTile(
-                                    track: f as Track,
-                                  ),
-                                ),
-                              ),
-                            if (e.value.elements.isNotEmpty &&
-                                e.value.elements.first is Album)
-                              Container(
-                                height: height + 8.0,
-                                child: HorizontalList(
-                                  padding: EdgeInsets.only(
-                                    left: tileMargin,
-                                    bottom: 8.0,
-                                  ),
-                                  children: e.value.elements
-                                      .map(
-                                        (f) => Padding(
-                                          padding: EdgeInsets.only(
-                                              right: tileMargin),
-                                          child: WebAlbumLargeTile(
-                                            album: f as Album,
-                                            width: width,
-                                            height: height,
-                                          ),
-                                        ),
-                                      )
-                                      .toList(),
-                                ),
-                              ),
-                            if (e.value.elements.isNotEmpty &&
-                                e.value.elements.first is Video)
-                              Container(
-                                height: height + 8.0,
-                                child: HorizontalList(
-                                  padding: EdgeInsets.only(
-                                    left: tileMargin,
-                                    bottom: 8.0,
-                                  ),
-                                  children: e.value.elements
-                                      .map(
-                                        (f) => Padding(
-                                          padding: EdgeInsets.only(
-                                              right: tileMargin),
-                                          child: WebVideoLargeTile(
-                                            track:
-                                                Track.fromWebVideo(f.toJson()),
-                                            width: height * 16 / 9,
-                                            height: height,
-                                          ),
-                                        ),
-                                      )
-                                      .toList(),
-                                ),
-                              ),
-                            if (e.value.elements.isNotEmpty &&
-                                e.value.elements.first is Playlist)
-                              Container(
-                                height: height + 8.0,
-                                child: HorizontalList(
-                                  padding: EdgeInsets.only(
-                                    left: tileMargin,
-                                    bottom: 8.0,
-                                  ),
-                                  children: e.value.elements
-                                      .map(
-                                        (f) => Padding(
-                                          padding: EdgeInsets.only(
-                                              right: tileMargin),
-                                          child: WebPlaylistLargeTile(
-                                            playlist: f as Playlist,
-                                            width: width,
-                                            height: height,
-                                          ),
-                                        ),
-                                      )
-                                      .toList(),
-                                ),
-                              ),
-                            if (e.value.elements.isNotEmpty &&
-                                e.value.elements.first is Artist)
-                              Container(
-                                height: width + 28.0 + 8.0,
-                                child: HorizontalList(
-                                  padding: EdgeInsets.only(
-                                    left: tileMargin,
-                                    bottom: 8.0,
-                                  ),
-                                  children: e.value.elements
-                                      .map(
-                                        (f) => Padding(
-                                          padding: EdgeInsets.only(
-                                              right: tileMargin),
-                                          child: WebArtistLargeTile(
-                                            artist: f as Artist,
-                                            width: width,
-                                            height: width + 28.0,
-                                          ),
-                                        ),
-                                      )
-                                      .toList(),
-                                ),
-                              ),
-                            const SizedBox(height: 16.0),
-                          ],
-                        ),
-                      ),
-                    ],
-                  ),
-                ),
-                TweenAnimationBuilder<Color?>(
-                  child: Row(
-                    children: [
-                      Spacer(),
-                      WebSearchBar(),
-                      SizedBox(
-                        width: 8.0,
-                      ),
-                      Material(
-                        color: Colors.transparent,
-                        child: Tooltip(
-                          message: Language.instance.SETTING,
-                          child: InkWell(
-                            onTap: () {
-                              Navigator.of(context).push(
-                                PageRouteBuilder(
-                                  pageBuilder: (context, animation,
-                                          secondaryAnimation) =>
-                                      FadeThroughTransition(
-                                    fillColor: Colors.transparent,
-                                    animation: animation,
-                                    secondaryAnimation: secondaryAnimation,
-                                    child: Settings(),
-                                  ),
-                                ),
-                              );
-                            },
-                            borderRadius: BorderRadius.circular(20.0),
-                            child: Container(
-                              height: 40.0,
-                              width: 40.0,
-                              child: Icon(
-                                Icons.settings,
-                                size: 20.0,
-                                color: Theme.of(context)
-                                    .appBarTheme
-                                    .actionsIconTheme
-                                    ?.color,
-                              ),
-                            ),
-                          ),
-                        ),
-                      ),
-                      SizedBox(
-                        width: 16.0,
-                      ),
-                    ],
-                  ),
-                  builder: (context, value, child) {
-                    return isDesktop
-                        ? DesktopAppBar(
-                            color: value,
-                            elevation: appBarVisible ? 0.0 : 4.0,
-                            child: child,
-                          )
-                        : Container();
-                  },
-                  duration: Duration(milliseconds: 200),
-                  tween: ColorTween(
-                    begin: Colors.transparent,
-                    end: appBarVisible
-                        ? Colors.transparent
-                        : Theme.of(context).appBarTheme.backgroundColor,
-                  ),
-                ),
-              ],
-            ),
-          )
-        : Scaffold(
-            body: Stack(
-              children: [
-                NowPlayingBarScrollHideNotifier(
-                  child: CustomScrollView(
-                    physics: physics,
-                    controller: scrollController,
-                    slivers: [
-                      SliverAppBar(
-                        systemOverlayStyle: SystemUiOverlayStyle(
-                          statusBarColor: Colors.transparent,
-                          statusBarIconBrightness: Brightness.light,
-                        ),
-                        expandedHeight: mobileSliverExpandedHeight,
-                        pinned: true,
-                        leading: IconButton(
-                          onPressed: Navigator.of(context).maybePop,
-                          icon: Icon(
-                            Icons.arrow_back,
-                            color: Theme.of(context)
-                                .extension<IconColors>()
-                                ?.appBarDarkIconColor,
-                          ),
-                          iconSize: 24.0,
-                          splashRadius: 20.0,
-                        ),
-                        actions: [
-                          IconButton(
-                            onPressed: () {
-                              Navigator.of(context).push(PageRouteBuilder(
-                                  pageBuilder: (context, animation,
-                                          secondaryAnimation) =>
-                                      FadeThroughTransition(
-                                          fillColor: Colors.transparent,
-                                          animation: animation,
-                                          secondaryAnimation:
-                                              secondaryAnimation,
-                                          child:
-                                              FloatingSearchBarWebSearchScreen())));
-                            },
-                            icon: Icon(
-                              Icons.search,
-                              color: Theme.of(context)
-                                  .extension<IconColors>()
-                                  ?.appBarActionDarkIconColor,
-                            ),
-                            iconSize: 24.0,
-                            splashRadius: 20.0,
-                          ),
-                          WebMobileAppBarOverflowButton(),
-                          const SizedBox(width: 8.0),
-                        ],
-                        forceElevated: true,
-                        title: TweenAnimationBuilder<double>(
-                          tween: Tween<double>(
-                            begin: 1.0,
-                            end: detailsVisible ? 0.0 : 1.0,
-                          ),
-                          duration: Duration(milliseconds: 200),
-                          builder: (context, value, _) => Opacity(
-                            opacity: value,
-                            child: Text(
-                              widget.artist.artistName.overflow,
-                              style: Theme.of(context)
-                                  .textTheme
-                                  .headline6
-                                  ?.copyWith(
-                                    color: Colors.white,
-                                  ),
-                              maxLines: 1,
-                              overflow: TextOverflow.ellipsis,
-                            ),
-                          ),
-                        ),
-                        backgroundColor: Colors.grey.shade900,
-                        flexibleSpace: Stack(
-                          children: [
-                            FlexibleSpaceBar(
-                              background: Column(
-                                children: [
-                                  Stack(
-                                    children: [
-                                      ExtendedImage.network(
-                                        widget.artist.coverUrl,
-                                        fit: BoxFit.cover,
-                                        width:
-                                            MediaQuery.of(context).size.width,
-                                        height: mobileSliverContentHeight,
-                                        enableLoadState: true,
-                                        enableMemoryCache: false,
-                                        cache: true,
-                                        loadStateChanged:
-                                            (ExtendedImageState state) {
-                                          return state.extendedImageLoadState ==
-                                                  LoadState.completed
-                                              ? TweenAnimationBuilder(
-                                                  tween: Tween<double>(
-                                                      begin: 0.0, end: 1.0),
-                                                  duration: const Duration(
-                                                      milliseconds: 800),
-                                                  child: state.completedWidget,
-                                                  builder:
-                                                      (context, value, child) =>
-                                                          Opacity(
-                                                    opacity: value as double,
-                                                    child:
-                                                        state.completedWidget,
-                                                  ),
-                                                )
-                                              : SizedBox.shrink();
-                                        },
-                                      ),
-                                      Positioned.fill(
-                                        child: Container(
-                                          decoration: BoxDecoration(
-                                            gradient: LinearGradient(
-                                              colors: [
-                                                Colors.black26,
-                                                Colors.transparent,
-                                              ],
-                                              begin: Alignment.topCenter,
-                                              end: Alignment.bottomCenter,
-                                              stops: [
-                                                0.0,
-                                                1.0,
-                                              ],
-                                            ),
-                                          ),
-                                        ),
-                                      ),
-                                    ],
-                                  ),
-                                  TweenAnimationBuilder<double>(
-                                    tween: Tween<double>(
-                                      begin: 1.0,
-                                      end: detailsVisible ? 1.0 : 0.0,
-                                    ),
-                                    duration: Duration(milliseconds: 200),
-                                    builder: (context, value, _) => Opacity(
-                                      opacity: value,
-                                      child: GestureDetector(
-                                        onTap: () {
-                                          if (widget
-                                              .artist.description.isNotEmpty) {
-                                            showDialog(
-                                              context: context,
-                                              builder: (context) => AlertDialog(
-                                                title: Text(
-                                                    widget.artist.artistName),
-                                                contentPadding:
-                                                    EdgeInsets.only(top: 20.0),
-                                                content: Column(
-                                                  mainAxisSize:
-                                                      MainAxisSize.min,
-                                                  children: [
-                                                    const Divider(
-                                                      height: 1.0,
-                                                      thickness: 1.0,
-                                                    ),
-                                                    ConstrainedBox(
-                                                      constraints:
-                                                          BoxConstraints(
-                                                        maxHeight: 360.0,
-                                                      ),
-                                                      child:
-                                                          SingleChildScrollView(
-                                                        padding: EdgeInsets
-                                                            .symmetric(
-                                                          horizontal: 24.0,
-                                                          vertical: 16.0,
-                                                        ),
-                                                        child: Text(
-                                                          widget.artist
-                                                              .description,
-                                                          style:
-                                                              Theme.of(context)
-                                                                  .textTheme
-                                                                  .headline3,
-                                                        ),
-                                                      ),
-                                                    ),
-                                                    const Divider(
-                                                      height: 1.0,
-                                                      thickness: 1.0,
-                                                    ),
-                                                  ],
-                                                ),
-                                                actions: [
-                                                  TextButton(
-                                                    onPressed:
-                                                        Navigator.of(context)
-                                                            .pop,
-                                                    child: Text(
-                                                      Language.instance.OK,
-                                                    ),
-                                                  ),
-                                                ],
-                                              ),
-                                            );
-                                          }
-                                        },
-                                        child: Container(
-                                          color: Colors.grey.shade900,
-                                          height: mobileSliverLabelHeight,
-                                          width:
-                                              MediaQuery.of(context).size.width,
-                                          padding: EdgeInsets.symmetric(
-                                              horizontal: 16.0),
-                                          child: Column(
-                                            mainAxisSize: MainAxisSize.max,
-                                            mainAxisAlignment:
-                                                MainAxisAlignment.center,
-                                            crossAxisAlignment:
-                                                CrossAxisAlignment.start,
-                                            children: [
-                                              Text(
-                                                widget
-                                                    .artist.artistName.overflow,
-                                                style: Theme.of(context)
-                                                    .textTheme
-                                                    .headline6
-                                                    ?.copyWith(
-                                                      color: Colors.white,
-                                                      fontSize: 24.0,
-                                                    ),
-                                                maxLines: 1,
-                                                overflow: TextOverflow.ellipsis,
-                                              ),
-                                              const SizedBox(height: 8.0),
-                                              Text(
-                                                [
-                                                  if (widget
-                                                      .artist.subscribersCount
-                                                      .split(' • ')
-                                                      .last
-                                                      .trim()
-                                                      .isNotEmpty)
-                                                    widget
-                                                        .artist.subscribersCount
-                                                        .split(' • ')
-                                                        .last
-                                                        .trim(),
-                                                  if (widget.artist.description
-                                                      .isNotEmpty)
-                                                    widget.artist.description,
-                                                ].join(' • '),
-                                                overflow: TextOverflow.ellipsis,
-                                                maxLines: 2,
-                                                style: Theme.of(context)
-                                                    .textTheme
-                                                    .headline3
-                                                    ?.copyWith(
-                                                      color: Colors.white70,
-                                                    ),
-                                              ),
-                                            ],
-                                          ),
-                                        ),
-                                      ),
-                                    ),
-                                  ),
-                                ],
-                              ),
-                            ),
-                            Positioned(
-                              top: mobileSliverFABYPos,
-                              right: 16.0 + 64.0,
-                              child: TweenAnimationBuilder(
-                                curve: Curves.easeOut,
-                                tween: Tween<double>(
-                                    begin: 0.0,
-                                    end: detailsVisible && secondary != null
-                                        ? 1.0
-                                        : 0.0),
-                                duration: Duration(milliseconds: 200),
-                                builder: (context, value, _) => Transform.scale(
-                                  scale: value as double,
-                                  child: Transform.rotate(
-                                    angle: value * pi + pi,
-                                    child: FloatingActionButton(
-                                      heroTag: Random().nextInt(1 << 32),
-                                      backgroundColor: secondary,
-                                      foregroundColor: [
-                                        Colors.white,
-                                        Color(0xFF212121)
-                                      ][(secondary?.computeLuminance() ?? 0.0) >
-                                              0.5
-                                          ? 1
-                                          : 0],
-                                      child: Icon(Icons.share),
-                                      onPressed: () {
-                                        Share.share(
-                                            'https://music.youtube.com/browse/${widget.artist.id}');
-                                      },
-                                    ),
-                                  ),
-                                ),
-                              ),
-                            ),
-                            Positioned(
-                              top: mobileSliverFABYPos,
-                              right: 16.0,
-                              child: TweenAnimationBuilder(
-                                curve: Curves.easeOut,
-                                tween: Tween<double>(
-                                    begin: 0.0,
-                                    end: detailsVisible && secondary != null
-                                        ? 1.0
-                                        : 0.0),
-                                duration: Duration(milliseconds: 200),
-                                builder: (context, value, _) => Transform.scale(
-                                  scale: value as double,
-                                  child: Transform.rotate(
-                                    angle: value * pi + pi,
-                                    child: FloatingActionButton(
-                                      heroTag: Random().nextInt(1 << 32),
-                                      backgroundColor: secondary,
-                                      foregroundColor: [
-                                        Colors.white,
-                                        Color(0xFF212121)
-                                      ][(secondary?.computeLuminance() ?? 0.0) >
-                                              0.5
-                                          ? 1
-                                          : 0],
-                                      child: Icon(Icons.shuffle),
-                                      onPressed: () {
-                                        Web.instance.open(widget.artist.data
-                                            .entries.first.value.elements
-                                            .cast<Track>());
-                                      },
-                                    ),
-                                  ),
-                                ),
-                              ),
-                            ),
-                          ],
-                        ),
-                      ),
-                      SliverPadding(
-                        padding: EdgeInsets.only(
-                          top: 20.0,
-                        ),
-                      ),
-                      SliverList(
-                        delegate: SliverChildListDelegate([
-                          ...widget.artist.data.entries.map(
-                            (e) => Column(
-                              crossAxisAlignment: CrossAxisAlignment.start,
-                              children: [
-                                Padding(
-                                  padding: EdgeInsets.symmetric(
-                                    horizontal: 16.0,
-                                  ),
-                                  child: isDesktop
-                                      ? SubHeader(e.key)
-                                      : Container(
-                                          alignment: Alignment.centerLeft,
-                                          padding: EdgeInsets.fromLTRB(
-                                              0.0, 0, 0, 20.0),
-                                          child: Text(
-                                            e.key.toUpperCase(),
-                                            style: Theme.of(context)
-                                                .textTheme
-                                                .overline
-                                                ?.copyWith(
-                                                  color: Theme.of(context)
-                                                      .textTheme
-                                                      .headline3
-                                                      ?.color,
-                                                  fontSize: 12.0,
-                                                  fontWeight: FontWeight.w600,
-                                                ),
-                                          ),
-                                        ),
-                                ),
-                                if (e.value.elements.isNotEmpty &&
-                                    e.value.elements.first is Track)
-                                  ...e.value.elements.map(
-                                    (f) => Padding(
-                                      padding: EdgeInsets.symmetric(
-                                          horizontal: isDesktop ? 16.0 : 0.0),
-                                      child: WebTrackTile(
-                                        track: f as Track,
-                                      ),
-                                    ),
-                                  ),
-                                if (e.value.elements.isNotEmpty &&
-                                    e.value.elements.first is Album)
-                                  Container(
-                                    height: height + 8.0,
-                                    child: HorizontalList(
-                                      padding: EdgeInsets.only(
-                                        left: tileMargin * 2.0,
-                                        bottom: 8.0,
-                                      ),
-                                      children: e.value.elements
-                                          .map(
-                                            (f) => Padding(
-                                              padding: EdgeInsets.only(
-                                                right: tileMargin * 2.0,
-                                              ),
-                                              child: WebAlbumLargeTile(
-                                                album: f as Album,
-                                                width: width,
-                                                height: height,
-                                              ),
-                                            ),
-                                          )
-                                          .toList(),
-                                    ),
-                                  ),
-                                if (e.value.elements.isNotEmpty &&
-                                    e.value.elements.first is Video)
-                                  Container(
-                                    height: height * 0.8 + 8.0,
-                                    child: HorizontalList(
-                                      padding: EdgeInsets.only(
-                                        left: tileMargin * 2.0,
-                                        bottom: 8.0,
-                                      ),
-                                      children: e.value.elements
-                                          .map(
-                                            (f) => Padding(
-                                              padding: EdgeInsets.only(
-                                                right: tileMargin * 2.0,
-                                              ),
-                                              child: WebVideoLargeTile(
-                                                track: Track.fromWebVideo(
-                                                    f.toJson()),
-                                                width: height * 0.8 * 16 / 9,
-                                                height: height * 0.8,
-                                              ),
-                                            ),
-                                          )
-                                          .toList(),
-                                    ),
-                                  ),
-                                if (e.value.elements.isNotEmpty &&
-                                    e.value.elements.first is Playlist)
-                                  Container(
-                                    height: height + 8.0,
-                                    child: HorizontalList(
-                                      padding: EdgeInsets.only(
-                                        left: tileMargin * 2.0,
-                                        bottom: 8.0,
-                                      ),
-                                      children: e.value.elements
-                                          .map(
-                                            (f) => Padding(
-                                              padding: EdgeInsets.only(
-                                                right: tileMargin * 2.0,
-                                              ),
-                                              child: WebPlaylistLargeTile(
-                                                playlist: f as Playlist,
-                                                width: width,
-                                                height: height,
-                                              ),
-                                            ),
-                                          )
-                                          .toList(),
-                                    ),
-                                  ),
-                                if (e.value.elements.isNotEmpty &&
-                                    e.value.elements.first is Artist)
-                                  Container(
-                                    height: width + 28.0 + 8.0,
-                                    child: HorizontalList(
-                                      padding: EdgeInsets.only(
-                                        left: tileMargin * 2.0,
-                                        bottom: 8.0,
-                                      ),
-                                      children: e.value.elements
-                                          .map(
-                                            (f) => Padding(
-                                              padding: EdgeInsets.only(
-                                                right: tileMargin * 2.0,
-                                              ),
-                                              child: WebArtistLargeTile(
-                                                artist: f as Artist,
-                                                width: width,
-                                                height: width + 28.0,
-                                              ),
-                                            ),
-                                          )
-                                          .toList(),
-                                    ),
-                                  ),
-                                const SizedBox(height: 16.0),
-                              ],
-                            ),
-                          ),
-                        ]),
-                      ),
-                      SliverPadding(
-                        padding: EdgeInsets.only(
-                          top: 20.0,
-                        ),
-                      ),
-                    ],
-                  ),
-                ),
-              ],
-            ),
-          );
-  }
-}
diff --git a/lib/web/playlist.dart b/lib/web/playlist.dart
deleted file mode 100644
index e873048..0000000
--- a/lib/web/playlist.dart
+++ /dev/null
@@ -1,1045 +0,0 @@
-/// This file is a part of Harmonoid (https://github.com/harmonoid/harmonoid).
-///
-/// Copyright © 2020-2022, Hitesh Kumar Saini <saini123hitesh@gmail.com>.
-/// All rights reserved.
-///
-/// Use of this source code is governed by the End-User License Agreement for Harmonoid that can be found in the EULA.txt file.
-///
-
-import 'dart:async';
-import 'dart:io';
-import 'dart:math';
-import 'package:animations/animations.dart';
-import 'package:flutter/material.dart';
-import 'package:flutter/rendering.dart';
-import 'package:flutter/services.dart';
-import 'package:harmonoid/web/web.dart';
-import 'package:media_library/media_library.dart' as media;
-import 'package:url_launcher/url_launcher.dart';
-import 'package:ytm_client/ytm_client.dart';
-import 'package:extended_image/extended_image.dart';
-import 'package:infinite_scroll_pagination/infinite_scroll_pagination.dart';
-
-import 'package:harmonoid/interface/settings/settings.dart';
-import 'package:harmonoid/core/collection.dart';
-import 'package:harmonoid/utils/rendering.dart';
-import 'package:harmonoid/utils/dimensions.dart';
-import 'package:harmonoid/utils/widgets.dart';
-import 'package:harmonoid/utils/theme.dart';
-import 'package:harmonoid/utils/palette_generator.dart';
-import 'package:harmonoid/web/utils/widgets.dart';
-import 'package:harmonoid/web/state/web.dart';
-import 'package:harmonoid/web/track.dart';
-import 'package:harmonoid/constants/language.dart';
-
-class WebPlaylistLargeTile extends StatelessWidget {
-  final double width;
-  final double height;
-  final Playlist playlist;
-  const WebPlaylistLargeTile({
-    Key? key,
-    required this.playlist,
-    required this.width,
-    required this.height,
-  }) : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    return Card(
-      clipBehavior: Clip.antiAlias,
-      elevation: 4.0,
-      margin: EdgeInsets.zero,
-      child: InkWell(
-        onTap: () async {
-          playlist.tracks = [];
-          playlist.continuation = null;
-          final thumbnails = playlist.thumbnails.values.toList();
-          precacheImage(
-            ExtendedNetworkImageProvider(thumbnails[thumbnails.length - 2],
-                cache: true),
-            context,
-          );
-          Navigator.of(context).push(
-            MaterialPageRoute(
-              builder: (context) => WebPlaylistScreen(
-                playlist: playlist,
-              ),
-            ),
-          );
-        },
-        child: Container(
-          height: height,
-          width: width,
-          child: Column(
-            children: [
-              ClipRect(
-                child: ScaleOnHover(
-                  child: Hero(
-                    tag: 'album_art_${playlist.id}',
-                    child: ExtendedImage(
-                      image: ExtendedNetworkImageProvider(
-                          playlist.thumbnails.values.skip(1).first,
-                          cache: true),
-                      fit: BoxFit.cover,
-                      height: width,
-                      width: width,
-                    ),
-                  ),
-                ),
-              ),
-              Expanded(
-                child: Container(
-                  padding: EdgeInsets.symmetric(
-                    horizontal: 8.0,
-                  ),
-                  width: width,
-                  child: Column(
-                    mainAxisSize: MainAxisSize.max,
-                    mainAxisAlignment: MainAxisAlignment.center,
-                    crossAxisAlignment: CrossAxisAlignment.start,
-                    children: [
-                      Text(
-                        playlist.name.overflow,
-                        style: Theme.of(context).textTheme.headline2,
-                        textAlign: TextAlign.left,
-                        maxLines: 1,
-                        overflow: TextOverflow.ellipsis,
-                      ),
-                    ],
-                  ),
-                ),
-              ),
-            ],
-          ),
-        ),
-      ),
-    );
-  }
-}
-
-class WebPlaylistTile extends StatelessWidget {
-  final Playlist playlist;
-  const WebPlaylistTile({
-    Key? key,
-    required this.playlist,
-  }) : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    return Material(
-      color: Colors.transparent,
-      child: InkWell(
-        onTap: () async {
-          playlist.tracks = [];
-          playlist.continuation = null;
-          final thumbnails = playlist.thumbnails.values.toList();
-          precacheImage(
-            ExtendedNetworkImageProvider(thumbnails[thumbnails.length - 2],
-                cache: true),
-            context,
-          );
-          Navigator.of(context).push(
-            MaterialPageRoute(
-              builder: (context) => WebPlaylistScreen(
-                playlist: playlist,
-              ),
-            ),
-          );
-        },
-        child: Column(
-          mainAxisAlignment: MainAxisAlignment.center,
-          children: [
-            Container(
-              height: 64.0,
-              alignment: Alignment.center,
-              margin: const EdgeInsets.symmetric(vertical: 4.0),
-              child: Row(
-                crossAxisAlignment: CrossAxisAlignment.center,
-                children: [
-                  const SizedBox(width: 12.0),
-                  ExtendedImage(
-                    image: NetworkImage(
-                      playlist.thumbnails.values.first,
-                    ),
-                    height: 56.0,
-                    width: 56.0,
-                  ),
-                  const SizedBox(width: 12.0),
-                  Expanded(
-                    child: Column(
-                      mainAxisSize: MainAxisSize.max,
-                      mainAxisAlignment: MainAxisAlignment.center,
-                      crossAxisAlignment: CrossAxisAlignment.start,
-                      children: [
-                        Text(
-                          playlist.name.overflow,
-                          overflow: TextOverflow.ellipsis,
-                          maxLines: 1,
-                          style: Theme.of(context).textTheme.headline2,
-                        ),
-                        const SizedBox(
-                          height: 2.0,
-                        ),
-                        Text(
-                          Language.instance.PLAYLIST_SINGLE,
-                          overflow: TextOverflow.ellipsis,
-                          maxLines: 1,
-                          style: Theme.of(context).textTheme.headline3,
-                        ),
-                      ],
-                    ),
-                  ),
-                  const SizedBox(width: 12.0),
-                  Container(
-                    width: 64.0,
-                    height: 64.0,
-                  ),
-                ],
-              ),
-            ),
-            const Divider(
-              height: 1.0,
-              indent: 80.0,
-            ),
-          ],
-        ),
-      ),
-    );
-  }
-}
-
-class WebPlaylistScreen extends StatefulWidget {
-  final Playlist playlist;
-  const WebPlaylistScreen({
-    Key? key,
-    required this.playlist,
-  }) : super(key: key);
-  WebPlaylistScreenState createState() => WebPlaylistScreenState();
-}
-
-class WebPlaylistScreenState extends State<WebPlaylistScreen>
-    with SingleTickerProviderStateMixin {
-  Color? color;
-  double elevation = 0.0;
-  PagingController<int, Track?> pagingController =
-      PagingController(firstPageKey: 0);
-  int last = 0;
-  ScrollController scrollController =
-      ScrollController(initialScrollOffset: isMobile ? 96.0 : 0.0);
-  Color? secondary;
-  int? hovered;
-  bool reactToSecondaryPress = false;
-  bool detailsVisible = false;
-  bool detailsLoaded = false;
-  ScrollPhysics? physics = NeverScrollableScrollPhysics();
-
-  bool isDark(BuildContext context) =>
-      (0.299 *
-              (color?.red ??
-                  (Theme.of(context).brightness == Brightness.dark
-                      ? 0.0
-                      : 255.0))) +
-          (0.587 *
-              (color?.green ??
-                  (Theme.of(context).brightness == Brightness.dark
-                      ? 0.0
-                      : 255.0))) +
-          (0.114 *
-              (color?.blue ??
-                  (Theme.of(context).brightness == Brightness.dark
-                      ? 0.0
-                      : 255.0))) <
-      128.0;
-
-  @override
-  void initState() {
-    super.initState();
-    pagingController.addPageRequestListener((pageKey) async {
-      if (pageKey == 0) {
-        pagingController.appendPage([null], 1);
-      } else {
-        last = widget.playlist.tracks.length;
-        await YTMClient.playlist(widget.playlist);
-        widget.playlist.tracks.asMap().entries.forEach((element) {
-          element.value.trackNumber = element.key + 1;
-        });
-        if (widget.playlist.continuation != '') {
-          pagingController.appendPage(
-            widget.playlist.tracks.skip(last).toList(),
-            pageKey + 1,
-          );
-        } else {
-          pagingController.appendLastPage(
-            widget.playlist.tracks.skip(last).toList(),
-          );
-        }
-      }
-    });
-    widget.playlist.tracks.sort(
-        (first, second) => first.trackNumber.compareTo(second.trackNumber));
-    if (isDesktop) {
-      Timer(
-        Duration(milliseconds: 300),
-        () {
-          PaletteGenerator.fromImageProvider(ExtendedNetworkImageProvider(
-                  widget.playlist.thumbnails.values.first))
-              .then((palette) {
-            setState(() {
-              if (palette.colors != null) {
-                color = palette.colors!.first;
-              }
-            });
-          });
-        },
-      );
-      scrollController.addListener(() {
-        if (scrollController.offset.isZero) {
-          setState(() {
-            elevation = 0.0;
-          });
-        } else if (elevation == 0.0) {
-          setState(() {
-            elevation = 4.0;
-          });
-        }
-      });
-    }
-    // TODO: MUST BE REMOVED BEFORE Flutter 3.3.x.
-    if (Platform.isWindows) {
-      scrollController.addListener(
-        () {
-          final scrollDirection = scrollController.position.userScrollDirection;
-          if (scrollDirection != ScrollDirection.idle) {
-            var scrollEnd = scrollController.offset +
-                (scrollDirection == ScrollDirection.reverse
-                    ? kWindowsScrollDelta
-                    : -kWindowsScrollDelta);
-            scrollEnd = min(scrollController.position.maxScrollExtent,
-                max(scrollController.position.minScrollExtent, scrollEnd));
-            scrollController.jumpTo(scrollEnd);
-          }
-        },
-      );
-    }
-    if (isMobile) {
-      PaletteGenerator.fromImageProvider(
-        ResizeImage.resizeIfNeeded(
-          100,
-          100,
-          ExtendedNetworkImageProvider(
-            widget.playlist.thumbnails.values.first,
-            cache: true,
-          ),
-        ),
-      ).then((palette) {
-        setState(() {
-          if (palette.colors != null) {
-            color = palette.colors!.first;
-            secondary = palette.colors!.last;
-          }
-          detailsVisible = true;
-        });
-      });
-      Timer(Duration(milliseconds: 100), () {
-        this
-            .scrollController
-            .animateTo(
-              0.0,
-              duration: Duration(milliseconds: 300),
-              curve: Curves.easeInOut,
-            )
-            .then((_) {
-          Timer(Duration(milliseconds: 50), () {
-            setState(() {
-              detailsLoaded = true;
-              physics = null;
-            });
-          });
-        });
-      });
-
-      scrollController.addListener(() {
-        if (scrollController.offset < 36.0) {
-          if (!detailsVisible) {
-            setState(() {
-              detailsVisible = true;
-            });
-          }
-        } else if (detailsVisible) {
-          setState(() {
-            detailsVisible = false;
-          });
-        }
-      });
-    }
-  }
-
-  @override
-  void dispose() {
-    scrollController.dispose();
-    super.dispose();
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    const mobileSliverLabelHeight = 116.0;
-    double mobileSliverContentHeight = MediaQuery.of(context).size.width;
-    double mobileSliverExpandedHeight = mobileSliverContentHeight -
-        MediaQuery.of(context).padding.top +
-        mobileSliverLabelHeight;
-    double mobileSliverFABYPos = mobileSliverContentHeight - 32.0;
-    if (mobileSliverExpandedHeight >
-        MediaQuery.of(context).size.height * 3 / 5) {
-      mobileSliverExpandedHeight = MediaQuery.of(context).size.height * 3 / 5;
-      mobileSliverContentHeight = mobileSliverExpandedHeight -
-          mobileSliverLabelHeight +
-          MediaQuery.of(context).padding.top;
-      mobileSliverFABYPos = mobileSliverContentHeight - 32.0;
-    }
-    return isDesktop
-        ? Scaffold(
-            body: Container(
-              height: MediaQuery.of(context).size.height,
-              child: Stack(
-                children: [
-                  PagedListView(
-                    scrollController: scrollController,
-                    pagingController: pagingController,
-                    padding: EdgeInsets.only(
-                      top: desktopTitleBarHeight + kDesktopAppBarHeight,
-                    ),
-                    builderDelegate: PagedChildBuilderDelegate<Track?>(
-                      newPageProgressIndicatorBuilder: (_) => Container(
-                        height: 96.0,
-                        child: Center(
-                          child: CircularProgressIndicator(
-                            valueColor: AlwaysStoppedAnimation(
-                              Theme.of(context).primaryColor,
-                            ),
-                          ),
-                        ),
-                      ),
-                      firstPageProgressIndicatorBuilder: (_) => Center(
-                        child: CircularProgressIndicator(
-                          valueColor: AlwaysStoppedAnimation(
-                            Theme.of(context).primaryColor,
-                          ),
-                        ),
-                      ),
-                      itemBuilder: (context, track, pageKey) => pageKey == 0
-                          ? TweenAnimationBuilder(
-                              tween: ColorTween(
-                                begin: Theme.of(context)
-                                    .appBarTheme
-                                    .backgroundColor,
-                                end: color == null
-                                    ? Theme.of(context)
-                                        .appBarTheme
-                                        .backgroundColor
-                                    : color!,
-                              ),
-                              curve: Curves.easeOut,
-                              duration: Duration(
-                                milliseconds: 300,
-                              ),
-                              builder: (context, color, _) =>
-                                  Transform.translate(
-                                offset: Offset(0, -8.0),
-                                child: Material(
-                                  color: color as Color? ?? Colors.transparent,
-                                  elevation: elevation == 0.0 ? 4.0 : 0.0,
-                                  borderRadius: BorderRadius.zero,
-                                  child: Container(
-                                    height: 312.0,
-                                    child: Row(
-                                      children: [
-                                        const SizedBox(width: 56.0),
-                                        Padding(
-                                          padding: EdgeInsets.all(20.0),
-                                          child: () {
-                                            final thumbnails = widget
-                                                .playlist.thumbnails.values
-                                                .toList();
-                                            return Hero(
-                                              tag:
-                                                  'playlist_art_${widget.playlist.name}',
-                                              child: Card(
-                                                color: Colors.white,
-                                                elevation: 4.0,
-                                                child: Stack(
-                                                  alignment: Alignment.center,
-                                                  children: [
-                                                    Padding(
-                                                      padding:
-                                                          EdgeInsets.all(8.0),
-                                                      child: ExtendedImage(
-                                                        image: ExtendedNetworkImageProvider(
-                                                            thumbnails[thumbnails
-                                                                    .length -
-                                                                2],
-                                                            cache: true),
-                                                        height: 256.0,
-                                                        width: 256.0,
-                                                        fit: BoxFit.cover,
-                                                      ),
-                                                    ),
-                                                  ],
-                                                ),
-                                              ),
-                                            );
-                                          }(),
-                                        ),
-                                        Expanded(
-                                          child: Padding(
-                                            padding: EdgeInsets.symmetric(
-                                                vertical: 20.0),
-                                            child: Column(
-                                              crossAxisAlignment:
-                                                  CrossAxisAlignment.start,
-                                              mainAxisAlignment:
-                                                  MainAxisAlignment.center,
-                                              children: [
-                                                Text(
-                                                  widget.playlist.name,
-                                                  style: Theme.of(context)
-                                                      .textTheme
-                                                      .headline1
-                                                      ?.copyWith(
-                                                        fontSize: 24.0,
-                                                        color: isDark(context)
-                                                            ? Colors.white
-                                                            : Colors.black,
-                                                      ),
-                                                  maxLines: 1,
-                                                  overflow:
-                                                      TextOverflow.ellipsis,
-                                                ),
-                                                SizedBox(height: 16.0),
-                                                Row(
-                                                  children: [
-                                                    ElevatedButton.icon(
-                                                      onPressed: () {
-                                                        Web.instance.open(widget
-                                                            .playlist.tracks);
-                                                      },
-                                                      style: ButtonStyle(
-                                                        elevation:
-                                                            MaterialStateProperty
-                                                                .all(0.0),
-                                                        backgroundColor:
-                                                            MaterialStateProperty
-                                                                .all(isDark(
-                                                                        context)
-                                                                    ? Colors
-                                                                        .white
-                                                                    : Colors
-                                                                        .black87),
-                                                        padding:
-                                                            MaterialStateProperty
-                                                                .all(EdgeInsets
-                                                                    .all(12.0)),
-                                                      ),
-                                                      icon: Icon(
-                                                        Icons.play_arrow,
-                                                        color: !isDark(context)
-                                                            ? Colors.white
-                                                            : Colors.black87,
-                                                      ),
-                                                      label: Text(
-                                                        Language
-                                                            .instance.PLAY_NOW
-                                                            .toUpperCase(),
-                                                        style: TextStyle(
-                                                          fontSize: 12.0,
-                                                          color:
-                                                              !isDark(context)
-                                                                  ? Colors.white
-                                                                  : Colors
-                                                                      .black87,
-                                                          letterSpacing: -0.1,
-                                                        ),
-                                                      ),
-                                                    ),
-                                                    const SizedBox(width: 8.0),
-                                                    OutlinedButton.icon(
-                                                      onPressed: () {
-                                                        Collection.instance
-                                                            .playlistCreate(
-                                                          media.Playlist(
-                                                            id: widget.playlist
-                                                                .name.hashCode,
-                                                            name: widget
-                                                                .playlist.name,
-                                                          )..tracks.addAll(widget
-                                                              .playlist.tracks
-                                                              .map((e) => media
-                                                                      .Track
-                                                                  .fromWebTrack(
-                                                                      e.toJson()))),
-                                                        );
-                                                      },
-                                                      style: OutlinedButton
-                                                          .styleFrom(
-                                                        // ignore: deprecated_member_use
-                                                        primary: Colors.white,
-                                                        side: BorderSide(
-                                                            color: isDark(
-                                                                    context)
-                                                                ? Colors.white
-                                                                : Colors
-                                                                    .black87),
-                                                        padding: EdgeInsets.all(
-                                                            12.0),
-                                                      ),
-                                                      icon: Icon(
-                                                        Icons.playlist_add,
-                                                        color: isDark(context)
-                                                            ? Colors.white
-                                                            : Colors.black87,
-                                                      ),
-                                                      label: Text(
-                                                        Language.instance
-                                                            .SAVE_AS_PLAYLIST
-                                                            .toUpperCase(),
-                                                        style: TextStyle(
-                                                          fontSize: 12.0,
-                                                          color: isDark(context)
-                                                              ? Colors.white
-                                                              : Colors.black87,
-                                                          letterSpacing: -0.1,
-                                                        ),
-                                                      ),
-                                                    ),
-                                                    const SizedBox(width: 8.0),
-                                                    OutlinedButton.icon(
-                                                      onPressed: () {
-                                                        launchUrl(
-                                                          Uri.parse(
-                                                              'https://music.youtube.com/browse/${widget.playlist.id}'),
-                                                          mode: LaunchMode
-                                                              .externalApplication,
-                                                        );
-                                                      },
-                                                      style: OutlinedButton
-                                                          .styleFrom(
-                                                        // ignore: deprecated_member_use
-                                                        primary: Colors.white,
-                                                        side: BorderSide(
-                                                            color: isDark(
-                                                                    context)
-                                                                ? Colors.white
-                                                                : Colors
-                                                                    .black87),
-                                                        padding: EdgeInsets.all(
-                                                            12.0),
-                                                      ),
-                                                      icon: Icon(
-                                                        Icons.open_in_new,
-                                                        color: isDark(context)
-                                                            ? Colors.white
-                                                            : Colors.black87,
-                                                      ),
-                                                      label: Text(
-                                                        Language.instance
-                                                            .OPEN_IN_BROWSER
-                                                            .toUpperCase(),
-                                                        style: TextStyle(
-                                                          fontSize: 12.0,
-                                                          color: isDark(context)
-                                                              ? Colors.white
-                                                              : Colors.black87,
-                                                          letterSpacing: -0.1,
-                                                        ),
-                                                      ),
-                                                    ),
-                                                  ],
-                                                ),
-                                              ],
-                                            ),
-                                          ),
-                                        ),
-                                        const SizedBox(width: 56.0),
-                                      ],
-                                    ),
-                                  ),
-                                ),
-                              ),
-                            )
-                          : WebTrackTile(
-                              track: track!,
-                              group: widget.playlist.tracks,
-                            ),
-                    ),
-                  ),
-                  TweenAnimationBuilder(
-                    tween: ColorTween(
-                      begin: Theme.of(context).appBarTheme.backgroundColor,
-                      end: color == null
-                          ? Theme.of(context).appBarTheme.backgroundColor
-                          : color!,
-                    ),
-                    curve: Curves.easeOut,
-                    duration: Duration(
-                      milliseconds: 300,
-                    ),
-                    builder: (context, color, _) => Theme(
-                      data: createTheme(
-                        color: isDark(context)
-                            ? kPrimaryDarkColor
-                            : kPrimaryLightColor,
-                        themeMode:
-                            isDark(context) ? ThemeMode.dark : ThemeMode.light,
-                      ),
-                      child: DesktopAppBar(
-                        elevation: elevation,
-                        color: color as Color? ?? Colors.transparent,
-                        child: Row(
-                          children: [
-                            Text(
-                              elevation != 0.0 ? widget.playlist.name : '',
-                              style: Theme.of(context)
-                                  .textTheme
-                                  .headline1
-                                  ?.copyWith(
-                                    color: isDark(context)
-                                        ? Colors.white
-                                        : Colors.black,
-                                  ),
-                            ),
-                            Spacer(),
-                            WebSearchBar(),
-                            SizedBox(
-                              width: 8.0,
-                            ),
-                            Material(
-                              color: Colors.transparent,
-                              child: Tooltip(
-                                message: Language.instance.SETTING,
-                                child: InkWell(
-                                  onTap: () {
-                                    Navigator.of(context).push(
-                                      PageRouteBuilder(
-                                        pageBuilder: (context, animation,
-                                                secondaryAnimation) =>
-                                            FadeThroughTransition(
-                                          fillColor: Colors.transparent,
-                                          animation: animation,
-                                          secondaryAnimation:
-                                              secondaryAnimation,
-                                          child: Settings(),
-                                        ),
-                                      ),
-                                    );
-                                  },
-                                  borderRadius: BorderRadius.circular(20.0),
-                                  child: Container(
-                                    height: 40.0,
-                                    width: 40.0,
-                                    child: Icon(
-                                      Icons.settings,
-                                      size: 20.0,
-                                      color: isDark(context)
-                                          ? Theme.of(context)
-                                              .extension<IconColors>()
-                                              ?.appBarActionDarkIconColor
-                                          : Theme.of(context)
-                                              .extension<IconColors>()
-                                              ?.appBarActionLightIconColor,
-                                    ),
-                                  ),
-                                ),
-                              ),
-                            ),
-                            SizedBox(
-                              width: 16.0,
-                            ),
-                          ],
-                        ),
-                      ),
-                    ),
-                  ),
-                ],
-              ),
-            ),
-          )
-        : Scaffold(
-            body: NowPlayingBarScrollHideNotifier(
-              child: CustomScrollView(
-                physics: physics,
-                controller: scrollController,
-                slivers: [
-                  SliverAppBar(
-                    actions: [
-                      IconButton(
-                        onPressed: () {
-                          Navigator.of(context).push(PageRouteBuilder(
-                              pageBuilder: (context, animation,
-                                      secondaryAnimation) =>
-                                  FadeThroughTransition(
-                                      fillColor: Colors.transparent,
-                                      animation: animation,
-                                      secondaryAnimation: secondaryAnimation,
-                                      child:
-                                          FloatingSearchBarWebSearchScreen())));
-                        },
-                        icon: Icon(
-                          Icons.search,
-                          color: Theme.of(context)
-                              .extension<IconColors>()
-                              ?.appBarActionDarkIconColor,
-                        ),
-                        iconSize: 24.0,
-                        splashRadius: 20.0,
-                      ),
-                      WebMobileAppBarOverflowButton(),
-                    ],
-                    systemOverlayStyle: SystemUiOverlayStyle(
-                      statusBarColor: Colors.transparent,
-                      statusBarIconBrightness: Brightness.light,
-                    ),
-                    expandedHeight: mobileSliverExpandedHeight,
-                    pinned: true,
-                    leading: IconButton(
-                      onPressed: Navigator.of(context).maybePop,
-                      icon: Icon(
-                        Icons.arrow_back,
-                        color: Theme.of(context)
-                            .extension<IconColors>()
-                            ?.appBarDarkIconColor,
-                      ),
-                      iconSize: 24.0,
-                      splashRadius: 20.0,
-                    ),
-                    forceElevated: true,
-                    title: TweenAnimationBuilder<double>(
-                      tween: Tween<double>(
-                        begin: 1.0,
-                        end: detailsVisible ? 0.0 : 1.0,
-                      ),
-                      duration: Duration(milliseconds: 200),
-                      builder: (context, value, _) => Opacity(
-                        opacity: value,
-                        child: Text(
-                          widget.playlist.name.overflow,
-                          style:
-                              Theme.of(context).textTheme.headline6?.copyWith(
-                                    color: Colors.white,
-                                  ),
-                          maxLines: 1,
-                          overflow: TextOverflow.ellipsis,
-                        ),
-                      ),
-                    ),
-                    backgroundColor: Colors.grey.shade900,
-                    flexibleSpace: Stack(
-                      children: [
-                        FlexibleSpaceBar(
-                          background: Column(
-                            children: [
-                              Stack(
-                                children: [
-                                  ExtendedImage.network(
-                                    widget.playlist.thumbnails.values
-                                        .toList()
-                                        .last,
-                                    fit: BoxFit.cover,
-                                    width: MediaQuery.of(context).size.width,
-                                    height: mobileSliverContentHeight,
-                                    enableLoadState: true,
-                                    enableMemoryCache: false,
-                                    cache: true,
-                                    loadStateChanged:
-                                        (ExtendedImageState state) {
-                                      return state.extendedImageLoadState ==
-                                              LoadState.completed
-                                          ? TweenAnimationBuilder(
-                                              tween: Tween<double>(
-                                                  begin: 0.0, end: 1.0),
-                                              duration: const Duration(
-                                                  milliseconds: 800),
-                                              child: state.completedWidget,
-                                              builder:
-                                                  (context, value, child) =>
-                                                      Opacity(
-                                                opacity: value as double,
-                                                child: state.completedWidget,
-                                              ),
-                                            )
-                                          : SizedBox.shrink();
-                                    },
-                                  ),
-                                  Positioned.fill(
-                                    child: Container(
-                                      decoration: BoxDecoration(
-                                        gradient: LinearGradient(
-                                          colors: [
-                                            Colors.black26,
-                                            Colors.transparent,
-                                          ],
-                                          begin: Alignment.topCenter,
-                                          end: Alignment.bottomCenter,
-                                          stops: [
-                                            0.0,
-                                            0.5,
-                                          ],
-                                        ),
-                                      ),
-                                    ),
-                                  ),
-                                ],
-                              ),
-                              TweenAnimationBuilder<double>(
-                                tween: Tween<double>(
-                                  begin: 1.0,
-                                  end: detailsVisible ? 1.0 : 0.0,
-                                ),
-                                duration: Duration(milliseconds: 200),
-                                builder: (context, value, _) => Opacity(
-                                  opacity: value,
-                                  child: Container(
-                                    color: Colors.grey.shade900,
-                                    alignment: Alignment.centerLeft,
-                                    height: mobileSliverLabelHeight,
-                                    width: MediaQuery.of(context).size.width,
-                                    padding:
-                                        EdgeInsets.symmetric(horizontal: 16.0),
-                                    child: Text(
-                                      widget.playlist.name.overflow,
-                                      style: Theme.of(context)
-                                          .textTheme
-                                          .headline6
-                                          ?.copyWith(
-                                            color: Colors.white,
-                                            fontSize: 24.0,
-                                          ),
-                                      maxLines: 1,
-                                      overflow: TextOverflow.ellipsis,
-                                    ),
-                                  ),
-                                ),
-                              ),
-                            ],
-                          ),
-                        ),
-                        Positioned(
-                          top: mobileSliverFABYPos,
-                          right: 16.0 + 64.0,
-                          child: TweenAnimationBuilder(
-                            curve: Curves.easeOut,
-                            tween: Tween<double>(
-                                begin: 0.0,
-                                end: detailsVisible && secondary != null
-                                    ? 1.0
-                                    : 0.0),
-                            duration: Duration(milliseconds: 200),
-                            builder: (context, value, _) => Transform.scale(
-                              scale: value as double,
-                              child: Transform.rotate(
-                                angle: value * pi + pi,
-                                child: FloatingActionButton(
-                                  heroTag: Random().nextInt(1 << 32),
-                                  backgroundColor: secondary,
-                                  foregroundColor: [
-                                    Colors.white,
-                                    Color(0xFF212121)
-                                  ][(secondary?.computeLuminance() ?? 0.0) > 0.5
-                                      ? 1
-                                      : 0],
-                                  tooltip: Language.instance.PLAY_NOW,
-                                  child: Icon(Icons.play_arrow),
-                                  onPressed: () {
-                                    Web.instance.open(widget.playlist.tracks);
-                                  },
-                                ),
-                              ),
-                            ),
-                          ),
-                        ),
-                        Positioned(
-                          top: mobileSliverFABYPos,
-                          right: 16.0,
-                          child: TweenAnimationBuilder(
-                            curve: Curves.easeOut,
-                            tween: Tween<double>(
-                                begin: 0.0,
-                                end: detailsVisible && secondary != null
-                                    ? 1.0
-                                    : 0.0),
-                            duration: Duration(milliseconds: 200),
-                            builder: (context, value, _) => Transform.scale(
-                              scale: value as double,
-                              child: Transform.rotate(
-                                angle: value * pi + pi,
-                                child: FloatingActionButton(
-                                  heroTag: Random().nextInt(1 << 32),
-                                  backgroundColor: secondary,
-                                  foregroundColor: [
-                                    Colors.white,
-                                    Color(0xFF212121)
-                                  ][(secondary?.computeLuminance() ?? 0.0) > 0.5
-                                      ? 1
-                                      : 0],
-                                  tooltip: Language.instance.SAVE_AS_PLAYLIST,
-                                  child: Icon(Icons.save),
-                                  onPressed: () {
-                                    Collection.instance.playlistCreate(
-                                      media.Playlist(
-                                        id: widget.playlist.name.hashCode,
-                                        name: widget.playlist.name,
-                                      )..tracks.addAll(widget.playlist.tracks
-                                          .map((e) => media.Track.fromWebTrack(
-                                              e.toJson()))),
-                                    );
-                                  },
-                                ),
-                              ),
-                            ),
-                          ),
-                        ),
-                      ],
-                    ),
-                  ),
-                  SliverPadding(
-                    padding: EdgeInsets.only(
-                      top: 20.0,
-                    ),
-                  ),
-                  PagedSliverList(
-                    pagingController: pagingController,
-                    builderDelegate: PagedChildBuilderDelegate<Track?>(
-                      newPageProgressIndicatorBuilder: (_) => Container(
-                        height: 96.0,
-                        child: Center(
-                          child: CircularProgressIndicator(
-                            valueColor: AlwaysStoppedAnimation(
-                              Theme.of(context).primaryColor,
-                            ),
-                          ),
-                        ),
-                      ),
-                      firstPageProgressIndicatorBuilder: (_) => Center(
-                        child: CircularProgressIndicator(
-                          valueColor: AlwaysStoppedAnimation(
-                            Theme.of(context).primaryColor,
-                          ),
-                        ),
-                      ),
-                      itemBuilder: (context, track, pageKey) => pageKey == 0
-                          ? SizedBox.shrink()
-                          : WebTrackTile(
-                              track: track!,
-                              group: widget.playlist.tracks,
-                            ),
-                    ),
-                  ),
-                  SliverPadding(
-                    padding: EdgeInsets.only(
-                      top: 20.0,
-                    ),
-                  ),
-                ],
-              ),
-            ),
-          );
-  }
-}
diff --git a/lib/web/state/web.dart b/lib/web/state/web.dart
deleted file mode 100644
index 37c2098..0000000
--- a/lib/web/state/web.dart
+++ /dev/null
@@ -1,101 +0,0 @@
-/// This file is a part of Harmonoid (https://github.com/harmonoid/harmonoid).
-///
-/// Copyright © 2020-2022, Hitesh Kumar Saini <saini123hitesh@gmail.com>.
-/// All rights reserved.
-///
-/// Use of this source code is governed by the End-User License Agreement for Harmonoid that can be found in the EULA.txt file.
-///
-import 'package:flutter/material.dart';
-import 'package:ytm_client/ytm_client.dart';
-import 'package:media_engine/media_engine.dart';
-import 'package:media_library/media_library.dart' as media;
-import 'package:infinite_scroll_pagination/infinite_scroll_pagination.dart';
-
-import 'package:harmonoid/core/playback.dart';
-import 'package:harmonoid/core/configuration.dart';
-
-class Web {
-  /// [Web] object instance.
-  static final Web instance = Web();
-
-  /// [PagingController] for infinitely scrolling recommendations.
-  ///
-  /// The reasons of this being here are:
-  /// * Ability to share already fetched recommendations on other screens.
-  /// * Ability to perform refresh once the user plays a [Track] or [Video]
-  ///   for the first time to switch to recommendations page from the
-  ///   "welcome page" dynamically. This is done from [open] method.
-  final PagingController<int, Track> pagingController =
-      PagingController<int, Track>(firstPageKey: 0);
-
-  /// Starts playback of a [Track], [Video] or a [List] of [Track]s.
-  /// Internally destructures the web specific models into local [media.Track].
-  Future<void> open(
-    value, {
-    int index = 0,
-  }) async {
-    if (value is Track) {
-      final id = LibmpvPluginUtils.redirect(value.uri).queryParameters['id']!;
-      Playback.instance.open(
-        [media.Track.fromWebTrack(value.toJson())],
-      );
-      bool reload = Configuration.instance.webRecent.isEmpty;
-      await Configuration.instance.save(
-        webRecent: [
-          LibmpvPluginUtils.redirect(value.uri).queryParameters['id']!
-        ],
-      );
-      if (reload) {
-        debugPrint('Web.open: pagingController.refresh');
-        pagingController.refresh();
-        refreshCallback?.call();
-      }
-      Playback.instance.add(
-        (await YTMClient.next(id))
-            .sublist(1)
-            .map((e) => media.Track.fromJson(e.toJson()))
-            .toList(),
-      );
-    } else if (value is Video) {
-      final id = LibmpvPluginUtils.redirect(value.uri).queryParameters['id']!;
-      Playback.instance.open(
-        [media.Track.fromWebVideo(value.toJson())],
-      );
-      bool reload = Configuration.instance.webRecent.isEmpty;
-      await Configuration.instance.save(
-        webRecent: [
-          LibmpvPluginUtils.redirect(value.uri).queryParameters['id']!
-        ],
-      );
-      if (reload) {
-        debugPrint('Web.open: pagingController.refresh');
-        pagingController.refresh();
-        refreshCallback?.call();
-      }
-      Playback.instance.add(
-        (await YTMClient.next(id))
-            .sublist(1)
-            .map((e) => media.Track.fromJson(e.toJson()))
-            .toList(),
-      );
-    } else if (value is List<Track>) {
-      Playback.instance.open(
-        value.map((e) => media.Track.fromWebTrack(e.toJson())).toList(),
-        index: index,
-      );
-      bool reload = Configuration.instance.webRecent.isEmpty;
-      await Configuration.instance.save(
-        webRecent: [
-          LibmpvPluginUtils.redirect(value.first.uri).queryParameters['id']!
-        ],
-      );
-      if (reload) {
-        debugPrint('Web.open: pagingController.refresh');
-        pagingController.refresh();
-        refreshCallback?.call();
-      }
-    }
-  }
-
-  VoidCallback? refreshCallback;
-}
diff --git a/lib/web/track.dart b/lib/web/track.dart
deleted file mode 100644
index b4825c1..0000000
--- a/lib/web/track.dart
+++ /dev/null
@@ -1,542 +0,0 @@
-/// This file is a part of Harmonoid (https://github.com/harmonoid/harmonoid).
-///
-/// Copyright © 2020-2022, Hitesh Kumar Saini <saini123hitesh@gmail.com>.
-/// All rights reserved.
-///
-/// Use of this source code is governed by the End-User License Agreement for Harmonoid that can be found in the EULA.txt file.
-///
-import 'dart:collection';
-import 'package:flutter/material.dart';
-import 'package:harmonoid/utils/palette_generator.dart';
-import 'package:ytm_client/ytm_client.dart';
-import 'package:extended_image/extended_image.dart';
-
-import 'package:harmonoid/web/state/web.dart';
-import 'package:harmonoid/constants/language.dart';
-import 'package:harmonoid/utils/rendering.dart';
-import 'package:harmonoid/utils/widgets.dart';
-import 'package:harmonoid/web/utils/rendering.dart';
-
-class WebTrackLargeTile extends StatefulWidget {
-  final double height;
-  final double width;
-  final Track track;
-  final HashMap<String, Color>? colorKeys;
-
-  const WebTrackLargeTile({
-    Key? key,
-    required this.track,
-    required this.height,
-    required this.width,
-    this.colorKeys,
-  }) : super(key: key);
-
-  @override
-  WebTrackLargeTileState createState() => WebTrackLargeTileState();
-}
-
-class WebTrackLargeTileState extends State<WebTrackLargeTile> {
-  double scale = 1.0;
-  Color? color;
-
-  bool get isDark =>
-      (0.299 * (color?.red ?? 256.0)) +
-          (0.587 * (color?.green ?? 256.0)) +
-          (0.114 * (color?.blue ?? 256.0)) <
-      128.0;
-
-  @override
-  void initState() {
-    super.initState();
-    if (widget.colorKeys != null) {
-      if (!widget.colorKeys!.containsKey(widget.track.uri.toString())) {
-        if (isDesktop) {
-          PaletteGenerator.fromImageProvider(ExtendedNetworkImageProvider(
-                  widget.track.thumbnails.values.first,
-                  cache: true))
-              .then((palette) {
-            setState(() {
-              if (palette.colors != null) {
-                widget.colorKeys![widget.track.uri.toString()] =
-                    palette.colors!.first;
-                color = palette.colors!.first;
-              }
-            });
-          });
-        }
-      } else {
-        color = widget.colorKeys![widget.track.uri.toString()];
-      }
-    }
-  }
-
-  Widget build(BuildContext context) {
-    return isDesktop
-        ? Card(
-            color: color,
-            clipBehavior: Clip.antiAlias,
-            elevation: 4.0,
-            margin: EdgeInsets.zero,
-            child: MouseRegion(
-              onEnter: (e) => setState(() {
-                scale = 1.1;
-              }),
-              onExit: (e) => setState(() {
-                scale = 1.0;
-              }),
-              child: Container(
-                height: widget.height,
-                width: widget.width,
-                child: Stack(
-                  alignment: Alignment.bottomLeft,
-                  children: [
-                    Row(
-                      crossAxisAlignment: CrossAxisAlignment.start,
-                      children: [
-                        ClipRect(
-                          child: Hero(
-                            tag: widget.track.hashCode,
-                            child: TweenAnimationBuilder(
-                              duration: const Duration(milliseconds: 100),
-                              tween: Tween<double>(begin: 1.0, end: scale),
-                              builder: (BuildContext context, double value, _) {
-                                return Transform.scale(
-                                  scale: value,
-                                  child: ExtendedImage(
-                                    image: NetworkImage(
-                                      widget.track.thumbnails[180] ??
-                                          widget.track.thumbnails.values.first,
-                                    ),
-                                    fit: BoxFit.cover,
-                                    width: widget.height,
-                                    height: widget.height,
-                                  ),
-                                );
-                              },
-                            ),
-                          ),
-                        ),
-                        const SizedBox(width: 12.0),
-                        Expanded(
-                          child: Column(
-                            mainAxisSize: MainAxisSize.max,
-                            mainAxisAlignment: MainAxisAlignment.center,
-                            crossAxisAlignment: CrossAxisAlignment.start,
-                            children: [
-                              const SizedBox(height: 16.0),
-                              Text(
-                                widget.track.trackName.replaceFirst('(', '\n('),
-                                style: Theme.of(context)
-                                    .textTheme
-                                    .headline3
-                                    ?.copyWith(
-                                      fontSize: 14.0,
-                                      color:
-                                          isDark ? Colors.white : Colors.black,
-                                      fontWeight: FontWeight.w600,
-                                    ),
-                                textAlign: TextAlign.left,
-                                maxLines: 2,
-                                overflow: TextOverflow.ellipsis,
-                              ),
-                              const SizedBox(height: 4.0),
-                              Text(
-                                '${widget.track.trackArtistNames.take(2).join(', ')}',
-                                style: Theme.of(context)
-                                    .textTheme
-                                    .headline3
-                                    ?.copyWith(
-                                      fontSize: isDesktop ? 12.0 : null,
-                                      color: isDark
-                                          ? Colors.white54
-                                          : Colors.black54,
-                                    ),
-                                maxLines: 1,
-                                textAlign: TextAlign.left,
-                                overflow: TextOverflow.ellipsis,
-                              ),
-                              const SizedBox(height: 2.0),
-                              Text(
-                                widget.track.duration.label,
-                                style: Theme.of(context)
-                                    .textTheme
-                                    .headline3
-                                    ?.copyWith(
-                                      fontSize: isDesktop ? 12.0 : null,
-                                      color: isDark
-                                          ? Colors.white54
-                                          : Colors.black54,
-                                    ),
-                              ),
-                              const SizedBox(height: 16.0),
-                            ],
-                          ),
-                        ),
-                        const SizedBox(width: 12.0),
-                      ],
-                    ),
-                    Material(
-                      color: Colors.transparent,
-                      child: InkWell(
-                        onTap: () {
-                          Web.instance.open(widget.track);
-                        },
-                        onLongPress: () async {
-                          int? result;
-                          await showModalBottomSheet(
-                            isScrollControlled: true,
-                            context: context,
-                            builder: (context) => Container(
-                              child: Column(
-                                mainAxisSize: MainAxisSize.min,
-                                children: webTrackPopupMenuItems(context)
-                                    .map(
-                                      (item) => PopupMenuItem(
-                                        child: item.child,
-                                        onTap: () => result = item.value,
-                                      ),
-                                    )
-                                    .toList(),
-                              ),
-                            ),
-                          );
-                          webTrackPopupMenuHandle(
-                              context, widget.track, result);
-                        },
-                        child: Container(
-                          width: widget.width,
-                          height: widget.height,
-                        ),
-                      ),
-                    ),
-                    Positioned(
-                      bottom: 4.0,
-                      right: 4.0,
-                      child: ContextMenuButton(
-                        itemBuilder: (BuildContext context) =>
-                            webTrackPopupMenuItems(
-                          context,
-                        ),
-                        onSelected: (result) async {
-                          webTrackPopupMenuHandle(
-                              context, widget.track, result as int?);
-                        },
-                        icon: Icon(
-                          Icons.more_vert,
-                          size: 16.0,
-                          color: isDark ? Colors.white54 : Colors.black54,
-                        ),
-                      ),
-                    ),
-                  ],
-                ),
-              ),
-            ),
-          )
-        : Card(
-            clipBehavior: Clip.antiAlias,
-            elevation: 4.0,
-            margin: EdgeInsets.zero,
-            color: Theme.of(context).cardColor,
-            child: Material(
-              color: Colors.transparent,
-              child: InkWell(
-                onTap: () {
-                  Web.instance.open(widget.track);
-                },
-                onLongPress: () async {
-                  int? result;
-                  await showModalBottomSheet(
-                    isScrollControlled: true,
-                    context: context,
-                    builder: (context) => Container(
-                      child: Column(
-                        mainAxisSize: MainAxisSize.min,
-                        children: webTrackPopupMenuItems(context)
-                            .map(
-                              (item) => PopupMenuItem(
-                                child: item.child,
-                                onTap: () => result = item.value,
-                              ),
-                            )
-                            .toList(),
-                      ),
-                    ),
-                  );
-                  webTrackPopupMenuHandle(context, widget.track, result);
-                },
-                child: Container(
-                  height: widget.height,
-                  width: widget.width,
-                  child: Row(
-                    crossAxisAlignment: CrossAxisAlignment.start,
-                    children: [
-                      ExtendedImage(
-                        image: NetworkImage(
-                          widget.track.thumbnails.values.skip(1).first,
-                        ),
-                        fit: BoxFit.cover,
-                        width: widget.height,
-                        height: widget.height,
-                      ),
-                      const SizedBox(width: 12.0),
-                      Expanded(
-                        child: Column(
-                          mainAxisSize: MainAxisSize.max,
-                          mainAxisAlignment: MainAxisAlignment.center,
-                          crossAxisAlignment: CrossAxisAlignment.start,
-                          children: [
-                            Text(
-                              widget.track.trackName.overflow,
-                              style: Theme.of(context).textTheme.headline2,
-                              textAlign: TextAlign.left,
-                              maxLines: 1,
-                              overflow: TextOverflow.ellipsis,
-                            ),
-                            const SizedBox(height: 4.0),
-                            Text(
-                              widget.track.trackArtistNames
-                                  .take(2)
-                                  .join(', ')
-                                  .overflow,
-                              style: Theme.of(context).textTheme.headline3,
-                              maxLines: 1,
-                              textAlign: TextAlign.left,
-                              overflow: TextOverflow.ellipsis,
-                            ),
-                          ],
-                        ),
-                      ),
-                      Container(
-                        height: widget.height,
-                        width: widget.height - 12.0,
-                        child: IconButton(
-                          iconSize: 24.0,
-                          splashRadius: 20.0,
-                          icon: Icon(
-                            Icons.more_vert,
-                            color: Theme.of(context).iconTheme.color,
-                          ),
-                          onPressed: () async {
-                            int? result;
-                            await showModalBottomSheet(
-                              isScrollControlled: true,
-                              context: context,
-                              builder: (context) => Container(
-                                child: Column(
-                                  mainAxisSize: MainAxisSize.min,
-                                  children: webTrackPopupMenuItems(context)
-                                      .map(
-                                        (item) => PopupMenuItem(
-                                          child: item.child,
-                                          onTap: () => result = item.value,
-                                        ),
-                                      )
-                                      .toList(),
-                                ),
-                              ),
-                            );
-                            webTrackPopupMenuHandle(
-                                context, widget.track, result);
-                          },
-                        ),
-                      ),
-                    ],
-                  ),
-                ),
-              ),
-            ),
-          );
-  }
-}
-
-class WebTrackTile extends StatelessWidget {
-  final Track track;
-  final List<Track>? group;
-  const WebTrackTile({
-    Key? key,
-    required this.track,
-    this.group,
-  }) : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    return Material(
-      color: Colors.transparent,
-      child: ContextMenuArea(
-        onPressed: (e) async {
-          final result = await showMenu(
-            elevation: 4.0,
-            context: context,
-            constraints: BoxConstraints(
-              maxWidth: double.infinity,
-            ),
-            position: RelativeRect.fromLTRB(
-              e.position.dx,
-              e.position.dy,
-              MediaQuery.of(context).size.width,
-              MediaQuery.of(context).size.width,
-            ),
-            items: webTrackPopupMenuItems(
-              context,
-            ),
-          );
-          webTrackPopupMenuHandle(context, track, result);
-        },
-        child: InkWell(
-          onTap: () {
-            if (group != null) {
-              Web.instance.open(
-                group,
-                index: group!.indexOf(track),
-              );
-            } else {
-              Web.instance.open(track);
-            }
-          },
-          onLongPress: () async {
-            int? result;
-            await showModalBottomSheet(
-              isScrollControlled: true,
-              context: context,
-              builder: (context) => Container(
-                child: Column(
-                  mainAxisSize: MainAxisSize.min,
-                  children: webTrackPopupMenuItems(context)
-                      .map(
-                        (item) => PopupMenuItem(
-                          child: item.child,
-                          onTap: () => result = item.value,
-                        ),
-                      )
-                      .toList(),
-                ),
-              ),
-            );
-            webTrackPopupMenuHandle(context, track, result);
-          },
-          child: Column(
-            mainAxisAlignment: MainAxisAlignment.center,
-            children: [
-              Container(
-                height: 64.0,
-                alignment: Alignment.center,
-                margin: const EdgeInsets.symmetric(vertical: 4.0),
-                child: Row(
-                  crossAxisAlignment: CrossAxisAlignment.center,
-                  children: [
-                    const SizedBox(width: 12.0),
-                    if (track.thumbnails.isNotEmpty && group == null)
-                      ExtendedImage(
-                        image: NetworkImage(
-                          track.thumbnails.values.first,
-                        ),
-                        height: 56.0,
-                        width: 56.0,
-                      )
-                    else
-                      Container(
-                        height: 56.0,
-                        width: 56.0,
-                        child: Text(
-                          '${track.trackNumber}',
-                          style: Theme.of(context)
-                              .textTheme
-                              .headline3
-                              ?.copyWith(fontSize: 18.0),
-                        ),
-                        alignment: Alignment.center,
-                      ),
-                    const SizedBox(width: 12.0),
-                    Expanded(
-                      child: Column(
-                        mainAxisSize: MainAxisSize.max,
-                        mainAxisAlignment: MainAxisAlignment.center,
-                        crossAxisAlignment: CrossAxisAlignment.start,
-                        children: [
-                          Text(
-                            track.trackName.overflow,
-                            overflow: TextOverflow.ellipsis,
-                            maxLines: 1,
-                            style: Theme.of(context).textTheme.headline2,
-                          ),
-                          const SizedBox(
-                            height: 2.0,
-                          ),
-                          Text(
-                            [
-                              if (group == null &&
-                                  track.duration != Duration.zero)
-                                Language.instance.TRACK_SINGLE,
-                              if (track.albumArtistName.isNotEmpty)
-                                track.albumArtistName.overflow,
-                              if (track.albumName.isNotEmpty)
-                                track.albumName.overflow,
-                              if (track.duration != Duration.zero)
-                                track.duration.label
-                            ].join(' • '),
-                            overflow: TextOverflow.ellipsis,
-                            maxLines: 1,
-                            style: Theme.of(context).textTheme.headline3,
-                          ),
-                        ],
-                      ),
-                    ),
-                    const SizedBox(width: 4.0),
-                    Container(
-                      width: 64.0,
-                      height: 64.0,
-                      child: isMobile
-                          ? IconButton(
-                              splashRadius: 20.0,
-                              icon: Icon(
-                                Icons.more_vert,
-                              ),
-                              onPressed: () async {
-                                int? result;
-                                await showModalBottomSheet(
-                                  isScrollControlled: true,
-                                  context: context,
-                                  builder: (context) => Container(
-                                    child: Column(
-                                      mainAxisSize: MainAxisSize.min,
-                                      children: webTrackPopupMenuItems(context)
-                                          .map(
-                                            (item) => PopupMenuItem(
-                                              child: item.child,
-                                              onTap: () => result = item.value,
-                                            ),
-                                          )
-                                          .toList(),
-                                    ),
-                                  ),
-                                );
-                                webTrackPopupMenuHandle(
-                                  context,
-                                  track,
-                                  result,
-                                );
-                              },
-                            )
-                          : ContextMenuButton<int>(
-                              onSelected: (result) {
-                                webTrackPopupMenuHandle(context, track, result);
-                              },
-                              itemBuilder: (context) =>
-                                  webTrackPopupMenuItems(context),
-                            ),
-                    ),
-                  ],
-                ),
-              ),
-              const Divider(
-                height: 1.0,
-                indent: 80.0,
-              ),
-            ],
-          ),
-        ),
-      ),
-    );
-  }
-}
diff --git a/lib/web/utils/dimensions.dart b/lib/web/utils/dimensions.dart
deleted file mode 100644
index 6cc6448..0000000
--- a/lib/web/utils/dimensions.dart
+++ /dev/null
@@ -1,10 +0,0 @@
-/// This file is a part of Harmonoid (https://github.com/harmonoid/harmonoid).
-///
-/// Copyright © 2020-2022, Hitesh Kumar Saini <saini123hitesh@gmail.com>.
-/// All rights reserved.
-///
-/// Use of this source code is governed by the End-User License Agreement for Harmonoid that can be found in the EULA.txt file.
-///
-
-const kLargeTileWidth = 292.0;
-const kLargeTileHeight = 292.0 * 9 / 20;
diff --git a/lib/web/utils/rendering.dart b/lib/web/utils/rendering.dart
deleted file mode 100644
index ea50e33..0000000
--- a/lib/web/utils/rendering.dart
+++ /dev/null
@@ -1,155 +0,0 @@
-/// This file is a part of Harmonoid (https://github.com/harmonoid/harmonoid).
-///
-/// Copyright © 2020-2022, Hitesh Kumar Saini <saini123hitesh@gmail.com>.
-/// All rights reserved.
-///
-/// Use of this source code is governed by the End-User License Agreement for Harmonoid that can be found in the EULA.txt file.
-///
-import 'dart:io';
-
-import 'package:flutter/material.dart';
-import 'package:flutter/services.dart';
-import 'package:share_plus/share_plus.dart';
-import 'package:ytm_client/ytm_client.dart';
-import 'package:url_launcher/url_launcher.dart';
-import 'package:media_library/media_library.dart' as media;
-import 'package:fluentui_system_icons/fluentui_system_icons.dart';
-
-import 'package:harmonoid/core/playback.dart';
-import 'package:harmonoid/constants/language.dart';
-import 'package:harmonoid/state/mobile_now_playing_controller.dart';
-import 'package:harmonoid/utils/rendering.dart';
-
-List<PopupMenuItem<int>> webTrackPopupMenuItems(BuildContext context) => [
-      PopupMenuItem(
-        padding: EdgeInsets.zero,
-        value: 1,
-        child: ListTile(
-          leading: Icon(Platform.isWindows
-              ? FluentIcons.list_16_regular
-              : Icons.queue_music),
-          title: Text(
-            Language.instance.ADD_TO_PLAYLIST,
-            style: isDesktop ? Theme.of(context).textTheme.headline4 : null,
-          ),
-        ),
-      ),
-      PopupMenuItem(
-        padding: EdgeInsets.zero,
-        value: 2,
-        child: ListTile(
-          leading: Icon(
-              Platform.isWindows ? FluentIcons.link_20_regular : Icons.link),
-          title: Text(
-            Language.instance.COPY_LINK,
-            style: isDesktop ? Theme.of(context).textTheme.headline4 : null,
-          ),
-        ),
-      ),
-      PopupMenuItem(
-        padding: EdgeInsets.zero,
-        value: 0,
-        child: ListTile(
-          leading: Icon(
-              Platform.isWindows ? FluentIcons.earth_20_regular : Icons.web),
-          title: Text(
-            Language.instance.OPEN_IN_BROWSER,
-            style: isDesktop ? Theme.of(context).textTheme.headline4 : null,
-          ),
-        ),
-      ),
-      PopupMenuItem<int>(
-        padding: EdgeInsets.zero,
-        value: 3,
-        child: ListTile(
-          leading: Icon(Platform.isWindows
-              ? FluentIcons.music_note_2_16_regular
-              : Icons.music_note),
-          title: Text(
-            Language.instance.ADD_TO_NOW_PLAYING,
-            style: isDesktop ? Theme.of(context).textTheme.headline4 : null,
-          ),
-        ),
-      ),
-      if (Platform.isAndroid || Platform.isIOS)
-        PopupMenuItem<int>(
-          padding: EdgeInsets.zero,
-          value: 4,
-          child: ListTile(
-            leading: Icon(Platform.isWindows
-                ? FluentIcons.share_16_regular
-                : Icons.share),
-            title: Text(
-              Language.instance.SHARE,
-              style: isDesktop ? Theme.of(context).textTheme.headline4 : null,
-            ),
-          ),
-        ),
-      if (!isDesktop && !MobileNowPlayingController.instance.isHidden)
-        PopupMenuItem<int>(
-          padding: EdgeInsets.zero,
-          child: SizedBox(height: 64.0),
-        ),
-    ];
-
-Future<void> webTrackPopupMenuHandle(
-  BuildContext context,
-  dynamic item,
-  int? result,
-) async {
-  switch (result) {
-    case 0:
-      {
-        await launchUrl(
-          item.uri,
-          mode: LaunchMode.externalApplication,
-        );
-        break;
-      }
-    case 1:
-      {
-        if (item is Track) {
-          await showAddToPlaylistDialog(
-            context,
-            media.Track.fromWebTrack(item.toJson()),
-          );
-        } else if (item is Video) {
-          await showAddToPlaylistDialog(
-            context,
-            media.Track.fromWebVideo(item.toJson()),
-          );
-        }
-        break;
-      }
-    case 2:
-      {
-        Clipboard.setData(ClipboardData(text: item.uri.toString()));
-        break;
-      }
-    case 3:
-      {
-        if (item is Track) {
-          Playback.instance.add([media.Track.fromWebTrack(item.toJson())]);
-        } else if (item is Video) {
-          Playback.instance.add([media.Track.fromWebVideo(item.toJson())]);
-        }
-        break;
-      }
-    case 4:
-      {
-        media.Track? result;
-        if (item is Track) {
-          result = media.Track.fromWebTrack(item.toJson());
-        } else if (item is Video) {
-          result = media.Track.fromWebVideo(item.toJson());
-        }
-        if (result != null) {
-          Share.share('${result.trackName} • ${[
-            '',
-            media.kUnknownArtist,
-          ].contains(result.albumArtistName) ? result.trackArtistNames.take(2).join(', ') : result.albumArtistName} • ${result.uri.toString()}');
-        }
-        break;
-      }
-  }
-}
diff --git a/lib/web/utils/widgets.dart b/lib/web/utils/widgets.dart
deleted file mode 100644
index 97a921b..0000000
--- a/lib/web/utils/widgets.dart
+++ /dev/null
@@ -1,981 +0,0 @@
-/// This file is a part of Harmonoid (https://github.com/harmonoid/harmonoid).
-///
-/// Copyright © 2020-2022, Hitesh Kumar Saini <saini123hitesh@gmail.com>.
-/// All rights reserved.
-///
-/// Use of this source code is governed by the End-User License Agreement for Harmonoid that can be found in the EULA.txt file.
-///
-import 'dart:ui';
-import 'dart:math';
-import 'package:flutter/material.dart';
-import 'package:flutter/services.dart';
-import 'package:animations/animations.dart';
-import 'package:ytm_client/ytm_client.dart';
-import 'package:hotkey_manager/hotkey_manager.dart';
-import 'package:media_library/media_library.dart' as media;
-import 'package:substring_highlight/substring_highlight.dart';
-import 'package:material_floating_search_bar/material_floating_search_bar.dart';
-
-import 'package:harmonoid/core/collection.dart';
-import 'package:harmonoid/core/configuration.dart';
-import 'package:harmonoid/core/hotkeys.dart';
-import 'package:harmonoid/utils/theme.dart';
-import 'package:harmonoid/utils/rendering.dart';
-import 'package:harmonoid/utils/dimensions.dart';
-import 'package:harmonoid/interface/settings/about.dart';
-import 'package:harmonoid/interface/settings/settings.dart';
-import 'package:harmonoid/constants/language.dart';
-import 'package:harmonoid/web/web.dart';
-import 'package:harmonoid/web/state/web.dart';
-
-class WebSearchBar extends StatefulWidget {
-  final String? query;
-  WebSearchBar({
-    Key? key,
-    this.query,
-  }) : super(key: key);
-
-  @override
-  State<WebSearchBar> createState() => _WebSearchBarState();
-}
-
-class _WebSearchBarState extends State<WebSearchBar> {
-  List<String> _suggestions = <String>[];
-  int _highlightedSuggestionIndex = -1;
-  late TextEditingController _searchBarController;
-  HotKey? _hotKey;
-
-  @override
-  void dispose() {
-    if (_hotKey != null) {
-      HotKeyManager.instance.unregister(_hotKey!);
-    }
-    super.dispose();
-  }
-
-  Future<void> searchOrPlay(String value) async {
-    if (value.isEmpty) return;
-    final track = await YTMClient.player(value);
-    if (track != null) {
-      Web.instance.open(track);
-    } else {
-      Configuration.instance.save(
-        webSearchRecent:
-            ([value] + Configuration.instance.webRecent).take(10).toList(),
-      );
-      Navigator.of(context).push(
-        PageRouteBuilder(
-          pageBuilder: (context, animation, secondaryAnimation) =>
-              SharedAxisTransition(
-            animation: animation,
-            secondaryAnimation: secondaryAnimation,
-            transitionType: SharedAxisTransitionType.vertical,
-            child: WebSearch(
-              query: value,
-              future: YTMClient.search(value),
-            ),
-          ),
-        ),
-      );
-    }
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return Autocomplete<String>(
-      initialValue:
-          widget.query != null ? TextEditingValue(text: widget.query!) : null,
-      optionsBuilder: (value) => value.text.isEmpty ? [] : _suggestions,
-      optionsViewBuilder: (context, callback, _) => Container(
-        width: MediaQuery.of(context).size.width,
-        child: Stack(
-          children: [
-            Container(
-              height: 7 * 32.0,
-              width: 280.0,
-              child: Material(
-                color: Theme.of(context).cardColor,
-                borderRadius: BorderRadius.only(
-                  bottomLeft: Radius.circular(4.0),
-                  bottomRight: Radius.circular(4.0),
-                ),
-                elevation: 2.0,
-                child: ListView.builder(
-                  keyboardDismissBehavior:
-                      ScrollViewKeyboardDismissBehavior.onDrag,
-                  padding: EdgeInsets.zero,
-                  itemCount: _suggestions.length,
-                  itemBuilder: (BuildContext context, int index) {
-                    final String option = _suggestions.elementAt(index);
-                    return InkWell(
-                      onTap: () {
-                        callback(option);
-                        searchOrPlay(option);
-                      },
-                      child: Container(
-                        color: _highlightedSuggestionIndex == index
-                            ? Theme.of(context).focusColor
-                            : null,
-                        height: 32.0,
-                        alignment: Alignment.centerLeft,
-                        padding: EdgeInsets.only(left: 10.0),
-                        child: SubstringHighlight(
-                          text: option,
-                          term: _searchBarController.text,
-                          textStyle: Theme.of(context).textTheme.headline3!,
-                          textStyleHighlight: TextStyle(
-                            color:
-                                Theme.of(context).brightness == Brightness.dark
-                                    ? Colors.white
-                                    : Colors.black,
-                            fontWeight: FontWeight.w600,
-                          ),
-                          maxLines: 1,
-                          overflow: TextOverflow.ellipsis,
-                        ),
-                      ),
-                    );
-                  },
-                ),
-              ),
-            ),
-          ],
-        ),
-      ),
-      fieldViewBuilder: (context, controller, node, callback) {
-        if (_hotKey == null) {
-          _hotKey = searchBarHotkey;
-          HotKeyManager.instance.register(
-            _hotKey!,
-            keyDownHandler: (_) {
-              node.requestFocus();
-            },
-          );
-        }
-        _searchBarController = controller;
-        return Focus(
-          onFocusChange: (hasFocus) {
-            if (!hasFocus) {
-              HotKeys.instance.enableSpaceHotKey();
-            }
-          },
-          onKey: (node, event) {
-            var isArrowDownPressed =
-                event.isKeyPressed(LogicalKeyboardKey.arrowDown);
-
-            if (isArrowDownPressed ||
-                event.isKeyPressed(LogicalKeyboardKey.arrowUp)) {
-              _updateHighlightSuggestionIndex(isArrowDownPressed
-                  ? _highlightedSuggestionIndex + 1
-                  : _highlightedSuggestionIndex - 1);
-              _updateSearchFieldWithHighlightSuggestion(controller);
-            }
-
-            return KeyEventResult.ignored;
-          },
-          child: Container(
-            height: 40.0,
-            width: 298.0,
-            alignment: Alignment.center,
-            margin: EdgeInsets.only(
-              top: 0.0,
-              bottom: 0.0,
-            ),
-            padding: EdgeInsets.only(top: 2.0),
-            child: Focus(
-              onFocusChange: (hasFocus) {
-                if (hasFocus) {
-                  HotKeys.instance.disableSpaceHotKey();
-                } else {
-                  HotKeys.instance.enableSpaceHotKey();
-                }
-              },
-              child: TextField(
-                autofocus: isDesktop,
-                cursorWidth: 1.0,
-                focusNode: node,
-                controller: controller,
-                onChanged: (value) async {
-                  value = value.trim();
-                  setState(() {
-                    _highlightedSuggestionIndex = -1;
-                  });
-                  _suggestions = value.isEmpty
-                      ? []
-                      : await YTMClient.music_get_search_suggestions(value);
-                  setState(() {});
-                },
-                onSubmitted: (query) {
-                  searchOrPlay(query);
-                },
-                textAlignVertical: TextAlignVertical.center,
-                style: Theme.of(context).textTheme.headline4,
-                decoration: inputDecoration(
-                  context,
-                  Language.instance.COLLECTION_SEARCH_WELCOME,
-                  trailingIcon: Transform.rotate(
-                    angle: pi / 2,
-                    child: Tooltip(
-                      message: Language.instance.SEARCH,
-                      child: Icon(
-                        Icons.search,
-                        size: 20.0,
-                        color: Theme.of(context).iconTheme.color,
-                      ),
-                    ),
-                  ),
-                  trailingIconOnPressed: () {
-                    if (controller.text.isNotEmpty) {
-                      searchOrPlay(controller.text);
-                    }
-                  },
-                ),
-              ),
-            ),
-          ),
-        );
-      },
-    );
-  }
-
-  void _updateHighlightSuggestionIndex(int newIndex) {
-    if (newIndex < -1) newIndex++;
-    setState(() {
-      _highlightedSuggestionIndex =
-          _suggestions.isEmpty ? -1 : newIndex % _suggestions.length;
-    });
-  }
-
-  void _updateSearchFieldWithHighlightSuggestion(
-      TextEditingController controller) {
-    controller.text = _suggestions.elementAt(_highlightedSuggestionIndex);
-    controller.selection =
-        TextSelection.collapsed(offset: controller.text.length);
-  }
-}
-
-class PlaylistImportDialog extends StatefulWidget {
-  const PlaylistImportDialog({
-    Key? key,
-  }) : super(key: key);
-
-  @override
-  State<PlaylistImportDialog> createState() => _PlaylistImportDialogState();
-}
-
-class _PlaylistImportDialogState extends State<PlaylistImportDialog> {
-  final TextEditingController _controller = TextEditingController();
-  Playlist? playlist;
-  bool fetched = false;
-  bool saved = false;
-
-  @override
-  void dispose() {
-    _controller.dispose();
-    super.dispose();
-  }
-
-  void add() async {
-    if (_controller.text.isNotEmpty) {
-      try {
-        playlist = Playlist.fromRawURL(_controller.text);
-        setState(() {});
-        try {
-          while (playlist?.continuation != '') {
-            await YTMClient.playlist(playlist!);
-            setState(() {});
-          }
-        } catch (exception, stacktrace) {
-          debugPrint(exception.toString());
-          debugPrint(stacktrace.toString());
-        }
-        if (playlist!.tracks.isNotEmpty) {
-          if (playlist!.name.isEmpty) {
-            debugPrint('playlist.name.isEmpty');
-            await Navigator.of(context).maybePop();
-            String name = '';
-            await showDialog(
-              context: context,
-              builder: (ctx) => AlertDialog(
-                title: Text(
-                  Language.instance.PLAYLISTS_TEXT_FIELD_LABEL,
-                ),
-                content: Container(
-                  height: 40.0,
-                  width: 360.0,
-                  alignment: Alignment.center,
-                  margin: EdgeInsets.only(top: 0.0, bottom: 0.0),
-                  padding: EdgeInsets.only(top: 2.0),
-                  child: Focus(
-                    onFocusChange: (hasFocus) {
-                      if (hasFocus) {
-                        HotKeys.instance.disableSpaceHotKey();
-                      } else {
-                        HotKeys.instance.enableSpaceHotKey();
-                      }
-                    },
-                    child: TextField(
-                      autofocus: true,
-                      onChanged: (value) {
-                        playlist?.name = value;
-                        name = value;
-                      },
-                      cursorWidth: 1.0,
-                      onSubmitted: (value) {
-                        playlist?.name = value;
-                        Navigator.of(ctx).maybePop();
-                      },
-                      textAlignVertical: TextAlignVertical.center,
-                      style: Theme.of(ctx).textTheme.headline4,
-                      decoration: inputDecoration(
-                        ctx,
-                        Language.instance.PLAYLISTS_TEXT_FIELD_HINT,
-                      ),
-                    ),
-                  ),
-                ),
-                actions: [
-                  TextButton(
-                    child: Text(
-                      Language.instance.OK,
-                      style: TextStyle(
-                        color: Theme.of(context).primaryColor,
-                      ),
-                    ),
-                    onPressed: Navigator.of(context).maybePop,
-                  ),
-                ],
-              ),
-            );
-            if (name.isEmpty) {
-              throw FormatException(
-                'name.isEmpty',
-              );
-            }
-          }
-          debugPrint(playlist?.name.toString());
-          try {
-            setState(() {
-              fetched = true;
-            });
-          } catch (exception) {}
-          final result =
-              await Collection.instance.playlistCreateFromName(playlist!.name);
-          await Collection.instance.playlistAddTracks(
-            result,
-            playlist!.tracks
-                .map(
-                  (track) => media.Track.fromWebTrack(
-                    track.toJson(),
-                  ),
-                )
-                .toList(),
-          );
-          try {
-            setState(() {
-              saved = true;
-            });
-          } catch (exception) {}
-        } else {
-          showDialog(
-            context: context,
-            builder: (context) => AlertDialog(
-              title: Text(
-                Language.instance.ERROR,
-              ),
-              content: Text(
-                Language.instance.INTERNET_ERROR,
-                style: Theme.of(context).textTheme.headline3,
-                textAlign: TextAlign.start,
-              ),
-              actions: [
-                TextButton(
-                  child: Text(
-                    Language.instance.OK,
-                    style: TextStyle(
-                      color: Theme.of(context).primaryColor,
-                    ),
-                  ),
-                  onPressed: Navigator.of(context).maybePop,
-                ),
-              ],
-            ),
-          );
-        }
-      } on ArgumentError catch (exception, stacktrace) {
-        debugPrint(exception.toString());
-        debugPrint(stacktrace.toString());
-        playlist = null;
-        setState(() {});
-        showDialog(
-          context: context,
-          builder: (context) => AlertDialog(
-            title: Text(
-              Language.instance.ERROR,
-            ),
-            content: Text(
-              Language.instance.INVALID_PLAYLIST_URL,
-              style: Theme.of(context).textTheme.headline3,
-              textAlign: TextAlign.start,
-            ),
-            actions: [
-              TextButton(
-                child: Text(
-                  Language.instance.OK,
-                ),
-                onPressed: Navigator.of(context).maybePop,
-              ),
-            ],
-          ),
-        );
-      }
-    }
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    final content = Column(
-      crossAxisAlignment: CrossAxisAlignment.start,
-      mainAxisSize: MainAxisSize.min,
-      children: [
-        Container(
-          height: 40.0,
-          width: 360.0,
-          alignment: Alignment.center,
-          margin: EdgeInsets.only(top: 0.0, bottom: 0.0),
-          padding: EdgeInsets.only(top: 2.0),
-          child: Focus(
-            onFocusChange: (hasFocus) {
-              if (hasFocus) {
-                HotKeys.instance.disableSpaceHotKey();
-              } else {
-                HotKeys.instance.enableSpaceHotKey();
-              }
-            },
-            child: TextField(
-              autofocus: true,
-              controller: _controller,
-              cursorWidth: 1.0,
-              onSubmitted: (_) => add(),
-              textAlignVertical: TextAlignVertical.center,
-              style: Theme.of(context).textTheme.headline4,
-              decoration: inputDecoration(
-                context,
-                Language.instance.IMPORT_PLAYLIST_SUBTITLE,
-              ),
-            ),
-          ),
-        ),
-        if (playlist != null) ...[
-          const SizedBox(height: 12.0),
-          if (playlist?.continuation != '' && !fetched)
-            Align(
-              child: Container(
-                margin: EdgeInsets.all(16.0),
-                height: 24.0,
-                width: 24.0,
-                alignment: Alignment.center,
-                child: CircularProgressIndicator(
-                  strokeWidth: 3.8,
-                  valueColor: AlwaysStoppedAnimation<Color>(
-                    Theme.of(context).primaryColor,
-                  ),
-                ),
-              ),
-            ),
-          Container(
-            width: 360.0,
-            child: Text(
-              '${Language.instance.PLAYLIST_NAME}: ${playlist?.name ?? ''}',
-              style: Theme.of(context).textTheme.headline3,
-              overflow: TextOverflow.ellipsis,
-            ),
-          ),
-          Text(
-            '${Language.instance.TRACK}: ${[
-              0,
-              null
-            ].contains(playlist?.tracks.length) ? '' : playlist?.tracks.length}',
-            style: Theme.of(context).textTheme.headline3,
-          ),
-        ],
-      ],
-    );
-    return AlertDialog(
-      title: Text(
-        Language.instance.IMPORT_PLAYLIST_TITLE,
-      ),
-      content: content,
-      actions: saved
-          ? [
-              TextButton(
-                child: Text(
-                  Language.instance.OK.toUpperCase(),
-                ),
-                onPressed: Navigator.of(context).maybePop,
-              ),
-            ]
-          : [
-              TextButton(
-                child: Text(
-                  Language.instance.SAVE.toUpperCase(),
-                  style: TextStyle(
-                    color: Theme.of(context).primaryColor,
-                  ),
-                ),
-                onPressed: add,
-              ),
-              TextButton(
-                child: Text(
-                  Language.instance.CANCEL.toUpperCase(),
-                ),
-                onPressed: Navigator.of(context).maybePop,
-              ),
-            ],
-    );
-  }
-}
-
-class PlaylistImportBottomSheet extends StatefulWidget {
-  PlaylistImportBottomSheet({Key? key}) : super(key: key);
-
-  @override
-  State<PlaylistImportBottomSheet> createState() =>
-      _PlaylistImportBottomSheetState();
-}
-
-class _PlaylistImportBottomSheetState extends State<PlaylistImportBottomSheet> {
-  final TextEditingController controller = TextEditingController();
-  Playlist? playlist;
-  bool fetched = false;
-  bool saved = false;
-
-  @override
-  void dispose() {
-    controller.dispose();
-    super.dispose();
-  }
-
-  void add() async {
-    if (controller.text.isNotEmpty) {
-      try {
-        playlist = Playlist.fromRawURL(controller.text);
-        setState(() {});
-        try {
-          while (playlist?.continuation != '') {
-            await YTMClient.playlist(playlist!);
-            setState(() {});
-          }
-        } catch (exception, stacktrace) {
-          debugPrint(exception.toString());
-          debugPrint(stacktrace.toString());
-        }
-        if (playlist!.tracks.isNotEmpty) {
-          if (playlist!.name.isEmpty) {
-            debugPrint('playlist.name.isEmpty');
-            await Navigator.of(context).maybePop();
-            String name = '';
-            await showModalBottomSheet(
-              context: context,
-              useRootNavigator: true,
-              builder: (ctx) => Container(
-                margin: EdgeInsets.only(
-                  bottom: MediaQuery.of(ctx).viewInsets.bottom -
-                      MediaQuery.of(ctx).padding.bottom,
-                ),
-                padding: EdgeInsets.all(8.0),
-                child: Column(
-                  mainAxisSize: MainAxisSize.min,
-                  crossAxisAlignment: CrossAxisAlignment.stretch,
-                  children: [
-                    const SizedBox(height: 4.0),
-                    TextField(
-                      textCapitalization: TextCapitalization.none,
-                      keyboardType: TextInputType.name,
-                      textInputAction: TextInputAction.done,
-                      autofocus: true,
-                      onChanged: (value) {
-                        playlist?.name = value;
-                        name = value;
-                      },
-                      onSubmitted: (value) {
-                        playlist?.name = value;
-                        Navigator.of(ctx).maybePop();
-                      },
-                      decoration: InputDecoration(
-                        hintText: Language.instance.PLAYLIST_NAME,
-                        contentPadding: EdgeInsets.fromLTRB(
-                          12,
-                          30,
-                          12,
-                          6,
-                        ),
-                        border: OutlineInputBorder(
-                          borderSide: BorderSide(
-                            color:
-                                Theme.of(ctx).iconTheme.color!.withOpacity(0.4),
-                            width: 1.8,
-                          ),
-                        ),
-                        enabledBorder: OutlineInputBorder(
-                          borderSide: BorderSide(
-                            color:
-                                Theme.of(ctx).iconTheme.color!.withOpacity(0.4),
-                            width: 1.8,
-                          ),
-                        ),
-                        focusedBorder: OutlineInputBorder(
-                          borderSide: BorderSide(
-                            color: Theme.of(ctx).primaryColor,
-                            width: 1.8,
-                          ),
-                        ),
-                      ),
-                    ),
-                    const SizedBox(height: 8.0),
-                    ElevatedButton(
-                      onPressed: Navigator.of(ctx).maybePop,
-                      style: ButtonStyle(
-                        backgroundColor: MaterialStateProperty.all(
-                          Theme.of(ctx).primaryColor,
-                        ),
-                      ),
-                      child: Text(
-                        Language.instance.OK.toUpperCase(),
-                        style: TextStyle(letterSpacing: 2.0),
-                      ),
-                    ),
-                  ],
-                ),
-              ),
-            );
-            if (name.isEmpty) {
-              throw FormatException(
-                'name.isEmpty',
-              );
-            }
-          }
-          debugPrint(playlist?.name.toString());
-          try {
-            setState(() {
-              fetched = true;
-            });
-          } catch (exception) {}
-          final result =
-              await Collection.instance.playlistCreateFromName(playlist!.name);
-          await Collection.instance.playlistAddTracks(
-            result,
-            playlist!.tracks
-                .map(
-                  (track) => media.Track.fromWebTrack(
-                    track.toJson(),
-                  ),
-                )
-                .toList(),
-          );
-          try {
-            setState(() {
-              saved = true;
-            });
-          } catch (exception) {}
-        } else {
-          showDialog(
-            context: context,
-            builder: (context) => AlertDialog(
-              title: Text(
-                Language.instance.ERROR,
-              ),
-              content: Text(
-                Language.instance.INTERNET_ERROR,
-                style: Theme.of(context).textTheme.headline3,
-                textAlign: TextAlign.start,
-              ),
-              actions: [
-                TextButton(
-                  child: Text(
-                    Language.instance.OK,
-                    style: TextStyle(
-                      color: Theme.of(context).primaryColor,
-                    ),
-                  ),
-                  onPressed: Navigator.of(context).maybePop,
-                ),
-              ],
-            ),
-          );
-        }
-      } on ArgumentError catch (exception, stacktrace) {
-        debugPrint(exception.toString());
-        debugPrint(stacktrace.toString());
-        playlist = null;
-        setState(() {});
-        showDialog(
-          context: context,
-          builder: (context) => AlertDialog(
-            title: Text(
-              Language.instance.ERROR,
-            ),
-            content: Text(
-              Language.instance.INVALID_PLAYLIST_URL,
-              style: Theme.of(context).textTheme.headline3,
-              textAlign: TextAlign.start,
-            ),
-            actions: [
-              TextButton(
-                child: Text(
-                  Language.instance.OK,
-                  style: TextStyle(
-                    color: Theme.of(context).primaryColor,
-                  ),
-                ),
-                onPressed: Navigator.of(context).maybePop,
-              ),
-            ],
-          ),
-        );
-      }
-    }
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return Container(
-      margin: EdgeInsets.only(
-        bottom: MediaQuery.of(context).viewInsets.bottom -
-            MediaQuery.of(context).padding.bottom,
-      ),
-      padding: EdgeInsets.all(8.0),
-      child: Column(
-        mainAxisSize: MainAxisSize.min,
-        crossAxisAlignment: CrossAxisAlignment.stretch,
-        children: [
-          const SizedBox(height: 4.0),
-          TextField(
-            textCapitalization: TextCapitalization.none,
-            keyboardType: TextInputType.url,
-            textInputAction: TextInputAction.done,
-            autofocus: true,
-            controller: controller,
-            onSubmitted: (_) => add(),
-            decoration: InputDecoration(
-              contentPadding: EdgeInsets.fromLTRB(
-                12,
-                30,
-                12,
-                6,
-              ),
-              hintText: Language.instance.IMPORT_PLAYLIST_SUBTITLE,
-              border: OutlineInputBorder(
-                borderSide: BorderSide(
-                  color: Theme.of(context).iconTheme.color!.withOpacity(0.4),
-                  width: 1.8,
-                ),
-              ),
-              enabledBorder: OutlineInputBorder(
-                borderSide: BorderSide(
-                  color: Theme.of(context).iconTheme.color!.withOpacity(0.4),
-                  width: 1.8,
-                ),
-              ),
-              focusedBorder: OutlineInputBorder(
-                borderSide: BorderSide(
-                  color: Theme.of(context).primaryColor,
-                  width: 1.8,
-                ),
-              ),
-            ),
-          ),
-          if (playlist != null) ...[
-            const SizedBox(height: 12.0),
-            Row(
-              crossAxisAlignment: CrossAxisAlignment.center,
-              children: [
-                Expanded(
-                  child: Column(
-                    crossAxisAlignment: CrossAxisAlignment.start,
-                    children: [
-                      Container(
-                        child: Text(
-                          '${Language.instance.PLAYLIST_NAME}: ${playlist?.name ?? ''}',
-                          style: Theme.of(context).textTheme.headline3,
-                          overflow: TextOverflow.ellipsis,
-                        ),
-                      ),
-                      Text(
-                        '${Language.instance.TRACK}: ${[
-                          0,
-                          null
-                        ].contains(playlist?.tracks.length) ? '' : playlist?.tracks.length}',
-                        style: Theme.of(context).textTheme.headline3,
-                      ),
-                    ],
-                  ),
-                ),
-                if (playlist?.continuation != '' && !fetched)
-                  Align(
-                    child: Container(
-                      margin: EdgeInsets.all(2.0).copyWith(
-                        left: 16.0,
-                        right: 16.0,
-                      ),
-                      height: 24.0,
-                      width: 24.0,
-                      alignment: Alignment.center,
-                      child: CircularProgressIndicator(
-                        strokeWidth: 3.8,
-                        valueColor: AlwaysStoppedAnimation<Color>(
-                          Theme.of(context).primaryColor,
-                        ),
-                      ),
-                    ),
-                  ),
-              ],
-            ),
-          ],
-          const SizedBox(height: 8.0),
-          if (saved)
-            ElevatedButton(
-              onPressed: Navigator.of(context).maybePop,
-              style: ButtonStyle(
-                backgroundColor: MaterialStateProperty.all(
-                  Theme.of(context).primaryColor,
-                ),
-              ),
-              child: Text(
-                Language.instance.OK.toUpperCase(),
-                style: TextStyle(letterSpacing: 2.0),
-              ),
-            )
-          else
-            ElevatedButton(
-              onPressed: add,
-              style: ButtonStyle(
-                backgroundColor: MaterialStateProperty.all(
-                  Theme.of(context).primaryColor,
-                ),
-              ),
-              child: Text(
-                Language.instance.ADD.toUpperCase(),
-                style: TextStyle(letterSpacing: 2.0),
-              ),
-            ),
-        ],
-      ),
-    );
-  }
-}
-
-class WebMobileAppBarOverflowButton extends StatefulWidget {
-  final Color? color;
-  final bool withinScreen;
-  WebMobileAppBarOverflowButton({
-    Key? key,
-    this.color,
-    this.withinScreen = true,
-  }) : super(key: key);
-
-  @override
-  State<WebMobileAppBarOverflowButton> createState() =>
-      _WebMobileAppBarOverflowButtonState();
-}
-
-class _WebMobileAppBarOverflowButtonState
-    extends State<WebMobileAppBarOverflowButton> {
-  @override
-  Widget build(BuildContext context) {
-    return CircularButton(
-      icon: Icon(
-        Icons.more_vert,
-        color: widget.color ??
-            Theme.of(context)
-                .extension<IconColors>()
-                ?.appBarActionDarkIconColor,
-      ),
-      onPressed: () {
-        final position = RelativeRect.fromRect(
-          Offset(
-                MediaQuery.of(context).size.width - tileMargin - 48.0,
-                widget.withinScreen
-                    ? (MediaQueryData.fromWindow(window).padding.top +
-                        kMobileSearchBarHeight +
-                        2 * tileMargin)
-                    : (MediaQuery.of(context).padding.top +
-                        kToolbarHeight +
-                        2 * tileMargin),
-              ) &
-              Size(double.infinity, double.infinity),
-          Rect.fromLTWH(
-            0,
-            0,
-            MediaQuery.of(context).size.width,
-            MediaQuery.of(context).size.height,
-          ),
-        );
-        showMenu<int>(
-          context: context,
-          position: position,
-          constraints: BoxConstraints(
-            maxWidth: double.infinity,
-            maxHeight: double.infinity,
-          ),
-          elevation: 4.0,
-          items: [
-            PopupMenuItem(
-              value: 0,
-              child: ListTile(
-                leading: Icon(
-                  Icons.settings,
-                  color: Theme.of(context).iconTheme.color,
-                ),
-                title: Text(Language.instance.SETTING),
-              ),
-            ),
-            PopupMenuItem(
-              value: 1,
-              child: ListTile(
-                leading: Icon(
-                  Icons.info,
-                  color: Theme.of(context).iconTheme.color,
-                ),
-                title: Text(Language.instance.ABOUT_TITLE),
-              ),
-            ),
-          ],
-        ).then((value) {
-          switch (value) {
-            case 0:
-              {
-                Navigator.push(
-                  context,
-                  PageRouteBuilder(
-                    pageBuilder: (context, animation, secondaryAnimation) =>
-                        FadeThroughTransition(
-                      animation: animation,
-                      secondaryAnimation: secondaryAnimation,
-                      child: Settings(),
-                    ),
-                  ),
-                );
-                break;
-              }
-            case 1:
-              {
-                Navigator.push(
-                  context,
-                  PageRouteBuilder(
-                    pageBuilder: (context, animation, secondaryAnimation) =>
-                        FadeThroughTransition(
-                      animation: animation,
-                      secondaryAnimation: secondaryAnimation,
-                      child: AboutPage(),
-                    ),
-                  ),
-                );
-                break;
-              }
-          }
-        });
-      },
-    );
-  }
-}
diff --git a/lib/web/video.dart b/lib/web/video.dart
deleted file mode 100644
index 88b14b7..0000000
--- a/lib/web/video.dart
+++ /dev/null
@@ -1,407 +0,0 @@
-/// This file is a part of Harmonoid (https://github.com/harmonoid/harmonoid).
-///
-/// Copyright © 2020-2022, Hitesh Kumar Saini <saini123hitesh@gmail.com>.
-/// All rights reserved.
-///
-/// Use of this source code is governed by the End-User License Agreement for Harmonoid that can be found in the EULA.txt file.
-///
-import 'package:flutter/material.dart';
-import 'package:ytm_client/ytm_client.dart';
-import 'package:extended_image/extended_image.dart';
-
-import 'package:harmonoid/constants/language.dart';
-import 'package:harmonoid/utils/rendering.dart';
-import 'package:harmonoid/utils/widgets.dart';
-import 'package:harmonoid/web/state/web.dart';
-import 'package:harmonoid/web/utils/rendering.dart';
-
-class WebVideoLargeTile extends StatefulWidget {
-  final double height;
-  final double width;
-  final Track track;
-
-  const WebVideoLargeTile({
-    Key? key,
-    required this.track,
-    required this.height,
-    required this.width,
-  }) : super(key: key);
-
-  @override
-  WebVideoLargeTileState createState() => WebVideoLargeTileState();
-}
-
-class WebVideoLargeTileState extends State<WebVideoLargeTile> {
-  double scale = 1.0;
-
-  Widget build(BuildContext context) {
-    return Card(
-      clipBehavior: Clip.antiAlias,
-      elevation: 4.0,
-      margin: EdgeInsets.zero,
-      child: MouseRegion(
-        onEnter: (e) => setState(() {
-          scale = 1.1;
-        }),
-        onExit: (e) => setState(() {
-          scale = 1.0;
-        }),
-        child: Container(
-          height: widget.height,
-          width: widget.width,
-          child: Stack(
-            alignment: Alignment.bottomLeft,
-            children: [
-              Hero(
-                tag: widget.track.hashCode,
-                child: TweenAnimationBuilder(
-                  duration: const Duration(milliseconds: 100),
-                  tween: Tween<double>(begin: 1.0, end: scale),
-                  builder: (BuildContext context, double value, _) {
-                    return Transform.scale(
-                      scale: value,
-                      child: ExtendedImage(
-                        image: ExtendedNetworkImageProvider(
-                          widget.track.thumbnails[120] ??
-                              widget.track.thumbnails.values.first,
-                          cache: true,
-                        ),
-                        fit: BoxFit.cover,
-                        width: widget.width,
-                        height: widget.height,
-                      ),
-                    );
-                  },
-                ),
-              ),
-              Material(
-                color: Colors.transparent,
-                child: InkWell(
-                  onTap: () {
-                    Web.instance.open(widget.track);
-                  },
-                  onLongPress: () async {
-                    int? result;
-                    await showModalBottomSheet(
-                      isScrollControlled: true,
-                      context: context,
-                      builder: (context) => Container(
-                        child: Column(
-                          mainAxisSize: MainAxisSize.min,
-                          children: webTrackPopupMenuItems(context)
-                              .map(
-                                (item) => PopupMenuItem(
-                                  child: item.child,
-                                  onTap: () => result = item.value,
-                                ),
-                              )
-                              .toList(),
-                        ),
-                      ),
-                    );
-                    webTrackPopupMenuHandle(context, widget.track, result);
-                  },
-                  child: Container(
-                    width: widget.width,
-                    height: widget.height,
-                    alignment: Alignment.bottomCenter,
-                    padding: EdgeInsets.symmetric(
-                      horizontal: 16.0,
-                    ),
-                    decoration: BoxDecoration(
-                      gradient: LinearGradient(
-                        begin: Alignment.topCenter,
-                        end: Alignment.bottomCenter,
-                        colors: [
-                          Colors.transparent,
-                          Colors.black54,
-                        ],
-                        stops: [
-                          0.2,
-                          1.0,
-                        ],
-                      ),
-                    ),
-                    child: Container(
-                      height: 64.0,
-                      child: Row(
-                        crossAxisAlignment: CrossAxisAlignment.center,
-                        children: [
-                          Expanded(
-                            child: Column(
-                              mainAxisSize: MainAxisSize.min,
-                              crossAxisAlignment: CrossAxisAlignment.start,
-                              children: [
-                                Text(
-                                  widget.track.trackName.overflow,
-                                  style: isDesktop
-                                      ? Theme.of(context)
-                                          .textTheme
-                                          .headline3
-                                          ?.copyWith(
-                                            fontSize: 14.0,
-                                            fontWeight: FontWeight.w600,
-                                            color: Colors.white,
-                                          )
-                                      : Theme.of(context)
-                                          .textTheme
-                                          .headline1
-                                          ?.copyWith(
-                                            fontSize: 20.0,
-                                            fontWeight: FontWeight.w600,
-                                            color: Colors.white,
-                                          ),
-                                  textAlign: TextAlign.left,
-                                  maxLines: 1,
-                                  overflow: TextOverflow.ellipsis,
-                                ),
-                                Padding(
-                                  padding: EdgeInsets.only(top: 2),
-                                  child: Text(
-                                    '${widget.track.trackArtistNames.take(2).join(', ')}',
-                                    style: Theme.of(context)
-                                        .textTheme
-                                        .headline3
-                                        ?.copyWith(
-                                          color: Colors.white54,
-                                          fontSize: 12.0,
-                                        ),
-                                    maxLines: 1,
-                                    textAlign: TextAlign.left,
-                                    overflow: TextOverflow.ellipsis,
-                                  ),
-                                ),
-                              ],
-                            ),
-                          ),
-                          const SizedBox(width: 12.0),
-                          if (widget.track.duration != Duration.zero)
-                            Text(
-                              widget.track.duration.label,
-                              style: TextStyle(
-                                color: Colors.white54,
-                              ),
-                            ),
-                          const SizedBox(width: 4.0),
-                        ],
-                      ),
-                    ),
-                  ),
-                ),
-              ),
-              Positioned(
-                top: 4.0,
-                right: 4.0,
-                child: isMobile
-                    ? IconButton(
-                        splashRadius: 20.0,
-                        icon: Icon(
-                          Icons.more_vert,
-                          color: Colors.white54,
-                        ),
-                        onPressed: () async {
-                          int? result;
-                          await showModalBottomSheet(
-                            isScrollControlled: true,
-                            context: context,
-                            builder: (context) => Container(
-                              child: Column(
-                                mainAxisSize: MainAxisSize.min,
-                                children: webTrackPopupMenuItems(context)
-                                    .map(
-                                      (item) => PopupMenuItem(
-                                        child: item.child,
-                                        onTap: () => result = item.value,
-                                      ),
-                                    )
-                                    .toList(),
-                              ),
-                            ),
-                          );
-                          webTrackPopupMenuHandle(
-                              context, widget.track, result);
-                        },
-                      )
-                    : ContextMenuButton(
-                        itemBuilder: (BuildContext context) =>
-                            webTrackPopupMenuItems(
-                          context,
-                        ),
-                        onSelected: (result) async {
-                          webTrackPopupMenuHandle(
-                              context, widget.track, result as int?);
-                        },
-                        icon: Icon(
-                          Icons.more_vert,
-                          size: 16.0,
-                          color: Colors.white54,
-                        ),
-                      ),
-              ),
-            ],
-          ),
-        ),
-      ),
-    );
-  }
-}
-
-class VideoTile extends StatelessWidget {
-  final Video video;
-  const VideoTile({Key? key, required this.video}) : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    return Material(
-      color: Colors.transparent,
-      child: ContextMenuArea(
-        onPressed: (e) async {
-          final result = await showMenu(
-            elevation: 4.0,
-            context: context,
-            constraints: BoxConstraints(
-              maxWidth: double.infinity,
-            ),
-            position: RelativeRect.fromLTRB(
-              e.position.dx,
-              e.position.dy,
-              MediaQuery.of(context).size.width,
-              MediaQuery.of(context).size.width,
-            ),
-            items: webTrackPopupMenuItems(
-              context,
-            ),
-          );
-          webTrackPopupMenuHandle(context, video, result);
-        },
-        child: InkWell(
-          onTap: () {
-            Web.instance.open(video);
-          },
-          onLongPress: () async {
-            int? result;
-            await showModalBottomSheet(
-              isScrollControlled: true,
-              context: context,
-              builder: (context) => Container(
-                child: Column(
-                  mainAxisSize: MainAxisSize.min,
-                  children: webTrackPopupMenuItems(context)
-                      .map(
-                        (item) => PopupMenuItem(
-                          child: item.child,
-                          onTap: () => result = item.value,
-                        ),
-                      )
-                      .toList(),
-                ),
-              ),
-            );
-            webTrackPopupMenuHandle(context, video, result);
-          },
-          child: Column(
-            mainAxisAlignment: MainAxisAlignment.center,
-            children: [
-              const Divider(
-                height: 1.0,
-                indent: 80.0,
-              ),
-              Container(
-                height: 64.0,
-                alignment: Alignment.center,
-                margin: const EdgeInsets.symmetric(vertical: 4.0),
-                child: Row(
-                  crossAxisAlignment: CrossAxisAlignment.center,
-                  children: [
-                    const SizedBox(width: 12.0),
-                    ExtendedImage(
-                      image: ExtendedNetworkImageProvider(
-                        video.thumbnails.values.first,
-                        cache: true,
-                      ),
-                      height: 56.0,
-                      width: 56.0,
-                    ),
-                    const SizedBox(width: 12.0),
-                    Expanded(
-                      child: Column(
-                        mainAxisSize: MainAxisSize.max,
-                        mainAxisAlignment: MainAxisAlignment.center,
-                        crossAxisAlignment: CrossAxisAlignment.start,
-                        children: [
-                          Text(
-                            video.videoName.overflow,
-                            overflow: TextOverflow.ellipsis,
-                            maxLines: 1,
-                            style: Theme.of(context).textTheme.headline2,
-                          ),
-                          const SizedBox(
-                            height: 2.0,
-                          ),
-                          Text(
-                            [
-                              Language.instance.VIDEO_SINGLE,
-                              video.channelName,
-                              (video.duration?.label ?? '')
-                            ].join(' • '),
-                            overflow: TextOverflow.ellipsis,
-                            maxLines: 1,
-                            style: Theme.of(context).textTheme.headline3,
-                          ),
-                        ],
-                      ),
-                    ),
-                    const SizedBox(width: 4.0),
-                    Container(
-                      width: 64.0,
-                      height: 64.0,
-                      child: isMobile
-                          ? IconButton(
-                              splashRadius: 20.0,
-                              icon: Icon(
-                                Icons.more_vert,
-                              ),
-                              onPressed: () async {
-                                int? result;
-                                await showModalBottomSheet(
-                                  isScrollControlled: true,
-                                  context: context,
-                                  builder: (context) => Container(
-                                    child: Column(
-                                      mainAxisSize: MainAxisSize.min,
-                                      children: webTrackPopupMenuItems(context)
-                                          .map(
-                                            (item) => PopupMenuItem(
-                                              child: item.child,
-                                              onTap: () => result = item.value,
-                                            ),
-                                          )
-                                          .toList(),
-                                    ),
-                                  ),
-                                );
-                                webTrackPopupMenuHandle(
-                                  context,
-                                  video,
-                                  result,
-                                );
-                              },
-                            )
-                          : ContextMenuButton<int>(
-                              onSelected: (result) {
-                                webTrackPopupMenuHandle(context, video, result);
-                              },
-                              itemBuilder: (context) =>
-                                  webTrackPopupMenuItems(context),
-                            ),
-                    ),
-                  ],
-                ),
-              ),
-            ],
-          ),
-        ),
-      ),
-    );
-  }
-}
diff --git a/lib/web/web.dart b/lib/web/web.dart
deleted file mode 100644
index f55e65f..0000000
--- a/lib/web/web.dart
+++ /dev/null
@@ -1,948 +0,0 @@
-/// This file is a part of Harmonoid (https://github.com/harmonoid/harmonoid).
-///
-/// Copyright © 2020-2022, Hitesh Kumar Saini <saini123hitesh@gmail.com>.
-/// All rights reserved.
-///
-/// Use of this source code is governed by the End-User License Agreement for Harmonoid that can be found in the EULA.txt file.
-///
-import 'dart:io';
-import 'dart:math';
-import 'dart:collection';
-import 'package:flutter/material.dart';
-import 'package:flutter/rendering.dart';
-import 'package:flutter/services.dart';
-import 'package:animations/animations.dart';
-import 'package:ytm_client/ytm_client.dart';
-import 'package:infinite_scroll_pagination/infinite_scroll_pagination.dart';
-import 'package:material_floating_search_bar/material_floating_search_bar.dart';
-
-import 'package:harmonoid/core/configuration.dart';
-import 'package:harmonoid/utils/rendering.dart';
-import 'package:harmonoid/utils/dimensions.dart';
-import 'package:harmonoid/utils/widgets.dart';
-import 'package:harmonoid/constants/language.dart';
-import 'package:harmonoid/interface/settings/settings.dart';
-import 'package:harmonoid/interface/collection/playlist.dart';
-import 'package:harmonoid/web/artist.dart';
-import 'package:harmonoid/web/track.dart';
-import 'package:harmonoid/web/album.dart';
-import 'package:harmonoid/web/video.dart';
-import 'package:harmonoid/web/playlist.dart';
-import 'package:harmonoid/web/utils/widgets.dart';
-import 'package:harmonoid/web/utils/dimensions.dart';
-import 'package:harmonoid/web/state/web.dart';
-
-class WebTab extends StatefulWidget {
-  const WebTab({Key? key}) : super(key: key);
-  WebTabState createState() => WebTabState();
-}
-
-class WebTabState extends State<WebTab> with AutomaticKeepAliveClientMixin {
-  int _index = 0;
-  @override
-  bool get wantKeepAlive => true;
-
-  @override
-  Widget build(BuildContext context) {
-    super.build(context);
-    return PageStorage(
-      bucket: PageStorageBucket(),
-      child: isMobile
-          ? FloatingSearchBarWebSearchScreen(
-              query: '',
-            )
-          : Scaffold(
-              resizeToAvoidBottomInset: false,
-              body: Stack(
-                children: [
-                  Padding(
-                    padding: EdgeInsets.only(
-                      top: desktopTitleBarHeight + kDesktopAppBarHeight,
-                    ),
-                    child: PageTransitionSwitcher(
-                      transitionBuilder:
-                          (child, primaryAnimation, secondaryAnimation) =>
-                              SharedAxisTransition(
-                        fillColor: Colors.transparent,
-                        animation: primaryAnimation,
-                        secondaryAnimation: secondaryAnimation,
-                        child: child,
-                        transitionType: SharedAxisTransitionType.vertical,
-                      ),
-                      child: [
-                        WebRecommendations(
-                          key: PageStorageKey(0),
-                        ),
-                        PlaylistTab(),
-                      ][_index],
-                    ),
-                  ),
-                  DesktopAppBar(),
-                  Container(
-                    margin: EdgeInsets.only(top: desktopTitleBarHeight),
-                    alignment: Alignment.center,
-                    height: kDesktopAppBarHeight,
-                    child: Row(
-                      children: [
-                        const SizedBox(width: 64.0),
-                        Material(
-                          color: Colors.transparent,
-                          child: Row(
-                            mainAxisSize: MainAxisSize.min,
-                            children: [
-                              Language.instance.RECOMMENDATIONS,
-                              Language.instance.PLAYLIST,
-                            ].map(
-                              (tab) {
-                                final i = [
-                                  Language.instance.RECOMMENDATIONS,
-                                  Language.instance.PLAYLIST,
-                                ].indexOf(tab);
-                                return InkWell(
-                                  borderRadius: BorderRadius.circular(4.0),
-                                  onTap: () {
-                                    if (_index == i) return;
-                                    setState(() {
-                                      _index = i;
-                                    });
-                                  },
-                                  child: Container(
-                                    height: 40.0,
-                                    padding:
-                                        EdgeInsets.symmetric(horizontal: 4.0),
-                                    alignment: Alignment.center,
-                                    margin:
-                                        EdgeInsets.symmetric(horizontal: 4.0),
-                                    child: Text(
-                                      tab.toUpperCase(),
-                                      style: TextStyle(
-                                        fontSize: 18.0,
-                                        fontWeight: _index == i
-                                            ? FontWeight.w600
-                                            : FontWeight.w300,
-                                        color: (Theme.of(context).brightness ==
-                                                    Brightness.dark
-                                                ? Colors.white
-                                                : Colors.black)
-                                            .withOpacity(
-                                                _index == i ? 1.0 : 0.67),
-                                      ),
-                                    ),
-                                  ),
-                                );
-                              },
-                            ).toList(),
-                          ),
-                        ),
-                        Spacer(),
-                        WebSearchBar(),
-                        SizedBox(
-                          width: 8.0,
-                        ),
-                        if (isDesktop)
-                          Material(
-                            color: Colors.transparent,
-                            child: Tooltip(
-                              message: Language.instance.SETTING,
-                              child: InkWell(
-                                onTap: () {
-                                  Navigator.of(context).push(
-                                    PageRouteBuilder(
-                                      pageBuilder: (context, animation,
-                                              secondaryAnimation) =>
-                                          FadeThroughTransition(
-                                        fillColor: Colors.transparent,
-                                        animation: animation,
-                                        secondaryAnimation: secondaryAnimation,
-                                        child: Settings(),
-                                      ),
-                                    ),
-                                  );
-                                },
-                                borderRadius: BorderRadius.circular(20.0),
-                                child: Container(
-                                  height: 40.0,
-                                  width: 40.0,
-                                  child: Icon(
-                                    Icons.settings,
-                                    size: 20.0,
-                                    color: Theme.of(context)
-                                        .appBarTheme
-                                        .actionsIconTheme
-                                        ?.color,
-                                  ),
-                                ),
-                              ),
-                            ),
-                          ),
-                        SizedBox(
-                          width: 16.0,
-                        ),
-                      ],
-                    ),
-                  ),
-                ],
-              ),
-            ),
-    );
-  }
-}
-
-class WebRecommendations extends StatefulWidget {
-  WebRecommendations({Key? key}) : super(key: key);
-
-  @override
-  State<WebRecommendations> createState() => _WebRecommendationsState();
-}
-
-class _WebRecommendationsState extends State<WebRecommendations>
-    with AutomaticKeepAliveClientMixin {
-  bool shouldRefreshOnDidChangeDependencies =
-      Configuration.instance.webRecent.isEmpty;
-  late ScrollController _scrollController = ScrollController();
-  final HashMap<String, Color> colorKeys = HashMap<String, Color>();
-
-  @override
-  void initState() {
-    super.initState();
-    // TODO: MUST BE REMOVED BEFORE Flutter 3.3.x.
-    if (Platform.isWindows) {
-      _scrollController.addListener(
-        () {
-          final scrollDirection =
-              _scrollController.position.userScrollDirection;
-          if (scrollDirection != ScrollDirection.idle) {
-            var scrollEnd = _scrollController.offset +
-                (scrollDirection == ScrollDirection.reverse
-                    ? kWindowsScrollDelta
-                    : -kWindowsScrollDelta);
-            scrollEnd = min(_scrollController.position.maxScrollExtent,
-                max(_scrollController.position.minScrollExtent, scrollEnd));
-            _scrollController.jumpTo(scrollEnd);
-          }
-        },
-      );
-    }
-    Web.instance.refreshCallback = () {
-      if (mounted) {
-        setState(() {});
-      }
-    };
-    Web.instance.pagingController.addPageRequestListener(fetchNextPage);
-  }
-
-  @override
-  void didChangeDependencies() {
-    super.didChangeDependencies();
-    if (shouldRefreshOnDidChangeDependencies) {
-      Web.instance.pagingController.refresh();
-      if (mounted) {
-        setState(() {});
-      }
-      shouldRefreshOnDidChangeDependencies =
-          Configuration.instance.webRecent.isEmpty;
-    }
-  }
-
-  @override
-  void dispose() {
-    Web.instance.pagingController.removePageRequestListener(fetchNextPage);
-    _scrollController.dispose();
-    super.dispose();
-  }
-
-  void fetchNextPage(int pageKey) async {
-    if (Configuration.instance.webRecent.isNotEmpty) {
-      try {
-        final items =
-            await YTMClient.next(Configuration.instance.webRecent.first);
-        Configuration.instance.save(
-          webRecent: [items.last.id],
-        );
-        Web.instance.pagingController.appendPage(
-          items.skip(1).toList(),
-          pageKey + 1,
-        );
-      } catch (_) {
-        fetchNextPage(pageKey);
-      }
-    }
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    super.build(context);
-    final elementsPerRow = (MediaQuery.of(context).size.width - tileMargin) ~/
-        (kLargeTileWidth + tileMargin);
-    final double width = isMobile
-        ? (MediaQuery.of(context).size.width -
-                (elementsPerRow + 1) * tileMargin) /
-            elementsPerRow
-        : kLargeTileWidth;
-    final double height = isMobile
-        ? width * kLargeTileHeight / kLargeTileWidth
-        : kLargeTileHeight;
-
-    return Stack(
-      alignment: Alignment.topCenter,
-      children: [
-        if (Configuration.instance.webRecent.isEmpty)
-          Container(
-            padding: EdgeInsets.only(
-              top: isDesktop
-                  ? 0.0
-                  : MediaQuery.of(context).padding.top +
-                      kMobileSearchBarHeight +
-                      2 * tileMargin,
-            ),
-            color: Theme.of(context).scaffoldBackgroundColor,
-            child: Center(
-              child: ExceptionWidget(
-                title: Language.instance.WEB_WELCOME_TITLE,
-                subtitle: Language.instance.WEB_WELCOME_SUBTITLE,
-              ),
-            ),
-          ),
-        if (Configuration.instance.webRecent.isNotEmpty)
-          Center(
-            child: Container(
-              alignment: Alignment.topCenter,
-              width: MediaQuery.of(context).size.width,
-              child: Center(
-                child: RefreshIndicator(
-                  displacement: MediaQuery.of(context).padding.top +
-                      kMobileSearchBarHeight +
-                      2 * tileMargin,
-                  color: Theme.of(context).primaryColor,
-                  onRefresh: () => Future.sync(
-                    () => Web.instance.pagingController.refresh(),
-                  ),
-                  child: isDesktop
-                      ? PagedGridView<int, Track>(
-                          scrollController: _scrollController,
-                          padding: EdgeInsets.only(
-                            left: (MediaQuery.of(context).size.width -
-                                    (elementsPerRow * kLargeTileWidth +
-                                        (elementsPerRow - 1) * tileMargin)) /
-                                2,
-                            right: (MediaQuery.of(context).size.width -
-                                    (elementsPerRow * kLargeTileWidth +
-                                        (elementsPerRow - 1) * tileMargin)) /
-                                2,
-                            top: tileMargin,
-                          ),
-                          showNewPageProgressIndicatorAsGridChild: false,
-                          pagingController: Web.instance.pagingController,
-                          builderDelegate: PagedChildBuilderDelegate<Track>(
-                            itemBuilder: (context, item, pageKey) =>
-                                item.thumbnails.containsKey(120)
-                                    ? WebTrackLargeTile(
-                                        height: height,
-                                        width: width,
-                                        track: item,
-                                        colorKeys: colorKeys,
-                                      )
-                                    : WebVideoLargeTile(
-                                        height: height,
-                                        width: width,
-                                        track: item,
-                                      ),
-                            newPageProgressIndicatorBuilder: (_) => Container(
-                              height: 96.0,
-                              child: Center(
-                                child: CircularProgressIndicator(
-                                  valueColor: AlwaysStoppedAnimation(
-                                    Theme.of(context).primaryColor,
-                                  ),
-                                ),
-                              ),
-                            ),
-                            firstPageProgressIndicatorBuilder: (_) => Center(
-                              child: CircularProgressIndicator(
-                                valueColor: AlwaysStoppedAnimation(
-                                  Theme.of(context).primaryColor,
-                                ),
-                              ),
-                            ),
-                          ),
-                          gridDelegate:
-                              SliverGridDelegateWithFixedCrossAxisCount(
-                            crossAxisCount: elementsPerRow,
-                            childAspectRatio: width / height,
-                            mainAxisSpacing: tileMargin,
-                            crossAxisSpacing: tileMargin,
-                          ),
-                        )
-                      : PagedListView(
-                          pagingController: Web.instance.pagingController,
-                          padding: EdgeInsets.only(
-                            top: kMobileSearchBarHeight +
-                                2 * tileMargin +
-                                MediaQuery.of(context).padding.top,
-                          ),
-                          builderDelegate: PagedChildBuilderDelegate<Track>(
-                            itemBuilder: (context, item, pageKey) => Padding(
-                              padding: EdgeInsets.fromLTRB(
-                                  tileMargin, 0, tileMargin, tileMargin),
-                              child: item.thumbnails.containsKey(120)
-                                  ? WebTrackLargeTile(
-                                      height: 72.0,
-                                      width: MediaQuery.of(context).size.width -
-                                          2 * tileMargin,
-                                      track: item,
-                                      colorKeys: colorKeys,
-                                    )
-                                  : WebVideoLargeTile(
-                                      height:
-                                          (MediaQuery.of(context).size.width -
-                                                  2 * tileMargin) *
-                                              9 /
-                                              16,
-                                      width: MediaQuery.of(context).size.width -
-                                          2 * tileMargin,
-                                      track: item,
-                                    ),
-                            ),
-                            newPageProgressIndicatorBuilder: (_) => Container(
-                              height: 96.0,
-                              child: Center(
-                                child: CircularProgressIndicator(
-                                  valueColor: AlwaysStoppedAnimation(
-                                    Theme.of(context).primaryColor,
-                                  ),
-                                ),
-                              ),
-                            ),
-                            firstPageProgressIndicatorBuilder: (_) => Center(
-                              child: CircularProgressIndicator(
-                                valueColor: AlwaysStoppedAnimation(
-                                  Theme.of(context).primaryColor,
-                                ),
-                              ),
-                            ),
-                          ),
-                        ),
-                ),
-              ),
-            ),
-          ),
-      ],
-    );
-  }
-
-  @override
-  bool get wantKeepAlive => true;
-}
-
-class WebSearch extends StatelessWidget {
-  final String query;
-  final Future<Map<String, List<Media>>> future;
-
-  const WebSearch({
-    Key? key,
-    required this.query,
-    required this.future,
-  }) : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    return isDesktop
-        ? Scaffold(
-            resizeToAvoidBottomInset: false,
-            body: Stack(
-              children: [
-                DesktopAppBar(
-                  child: Row(
-                    children: [
-                      Text(
-                        Language.instance.RESULTS_FOR_QUERY
-                            .replaceAll('QUERY', query.trim()),
-                        style: Theme.of(context).textTheme.headline1,
-                      ),
-                      Spacer(),
-                      WebSearchBar(query: this.query),
-                      SizedBox(
-                        width: 8.0,
-                      ),
-                      Material(
-                        color: Colors.transparent,
-                        child: Tooltip(
-                          message: Language.instance.SETTING,
-                          child: InkWell(
-                            onTap: () {
-                              Navigator.of(context).push(
-                                PageRouteBuilder(
-                                  pageBuilder: (context, animation,
-                                          secondaryAnimation) =>
-                                      FadeThroughTransition(
-                                    fillColor: Colors.transparent,
-                                    animation: animation,
-                                    secondaryAnimation: secondaryAnimation,
-                                    child: Settings(),
-                                  ),
-                                ),
-                              );
-                            },
-                            borderRadius: BorderRadius.circular(20.0),
-                            child: Container(
-                              height: 40.0,
-                              width: 40.0,
-                              child: Icon(
-                                Icons.settings,
-                                size: 20.0,
-                                color: Theme.of(context)
-                                    .appBarTheme
-                                    .actionsIconTheme
-                                    ?.color,
-                              ),
-                            ),
-                          ),
-                        ),
-                      ),
-                      SizedBox(
-                        width: 16.0,
-                      ),
-                    ],
-                  ),
-                ),
-                Container(
-                  margin: EdgeInsets.only(
-                    top: desktopTitleBarHeight + kDesktopAppBarHeight,
-                  ),
-                  child: CustomFutureBuilder<Map<String, List<Media>>>(
-                    future: future,
-                    loadingBuilder: (context) => Center(
-                      child: CircularProgressIndicator(
-                        valueColor: AlwaysStoppedAnimation(
-                          Theme.of(context).primaryColor,
-                        ),
-                      ),
-                    ),
-                    builder: (context, data) {
-                      if (data?.isNotEmpty ?? false) {
-                        final widgets = <Widget>[];
-                        data?.forEach(
-                          (key, value) {
-                            widgets.add(
-                              Row(
-                                children: [
-                                  SubHeader(key),
-                                  Spacer(),
-                                ],
-                              ),
-                            );
-                            value.forEach(
-                              (element) {
-                                if (element is Track) {
-                                  widgets.add(WebTrackTile(track: element));
-                                } else if (element is Artist) {
-                                  widgets.add(WebArtistTile(artist: element));
-                                } else if (element is Video) {
-                                  widgets.add(VideoTile(video: element));
-                                } else if (element is Album) {
-                                  widgets.add(WebAlbumTile(album: element));
-                                } else if (element is Playlist) {
-                                  widgets
-                                      .add(WebPlaylistTile(playlist: element));
-                                }
-                              },
-                            );
-                          },
-                        );
-                        return CustomListView(
-                          shrinkWrap: true,
-                          children: [
-                            Center(
-                              child: ConstrainedBox(
-                                constraints: BoxConstraints(maxWidth: 840.0),
-                                child: Column(
-                                  crossAxisAlignment: CrossAxisAlignment.center,
-                                  children: widgets,
-                                ),
-                              ),
-                            ),
-                          ],
-                        );
-                      } else {
-                        return Center(
-                          child: ExceptionWidget(
-                            title: Language
-                                .instance.COLLECTION_SEARCH_NO_RESULTS_TITLE,
-                            subtitle: Language.instance.WEB_NO_RESULTS,
-                          ),
-                        );
-                      }
-                    },
-                  ),
-                ),
-              ],
-            ),
-          )
-        : CustomFutureBuilder<Map<String, List<Media>>>(
-            future: future,
-            loadingBuilder: (context) => Center(
-              child: CircularProgressIndicator(
-                valueColor: AlwaysStoppedAnimation(
-                  Theme.of(context).primaryColor,
-                ),
-              ),
-            ),
-            builder: (context, data) {
-              if (data?.isNotEmpty ?? false) {
-                final widgets = <Widget>[];
-                data?.forEach(
-                  (key, value) {
-                    widgets.add(
-                      Row(
-                        children: [
-                          SubHeader(key),
-                          Spacer(),
-                        ],
-                      ),
-                    );
-                    value.forEach(
-                      (element) {
-                        if (element is Track) {
-                          widgets.add(WebTrackTile(track: element));
-                        } else if (element is Artist) {
-                          widgets.add(WebArtistTile(artist: element));
-                        } else if (element is Video) {
-                          widgets.add(VideoTile(video: element));
-                        } else if (element is Album) {
-                          widgets.add(WebAlbumTile(album: element));
-                        } else if (element is Playlist) {
-                          widgets.add(WebPlaylistTile(playlist: element));
-                        }
-                      },
-                    );
-                  },
-                );
-                return CustomListView(
-                  shrinkWrap: true,
-                  children: [
-                    Center(
-                      child: ConstrainedBox(
-                        constraints: BoxConstraints(maxWidth: 840.0),
-                        child: Column(
-                          crossAxisAlignment: CrossAxisAlignment.center,
-                          children: widgets,
-                        ),
-                      ),
-                    ),
-                  ],
-                );
-              } else {
-                return Center(
-                  child: ExceptionWidget(
-                    title: Language.instance.COLLECTION_SEARCH_NO_RESULTS_TITLE,
-                    subtitle: Language.instance.WEB_NO_RESULTS,
-                  ),
-                );
-              }
-            },
-          );
-  }
-}
-
-class FloatingSearchBarWebSearchTab extends StatefulWidget {
-  final ValueNotifier<String> query;
-  FloatingSearchBarWebSearchTab({
-    Key? key,
-    required this.query,
-  }) : super(key: key);
-
-  @override
-  State<FloatingSearchBarWebSearchTab> createState() =>
-      _FloatingSearchBarWebSearchTabState();
-}
-
-class _FloatingSearchBarWebSearchTabState
-    extends State<FloatingSearchBarWebSearchTab> {
-  List<String> result = [];
-
-  @override
-  void initState() {
-    super.initState();
-    widget.query.addListener(() {
-      YTMClient.music_get_search_suggestions(widget.query.value).then((value) {
-        setState(() {
-          result = value;
-        });
-      });
-    });
-  }
-
-  Widget build(BuildContext context) {
-    if (widget.query.value.isEmpty) {
-      return Card(
-        color: Theme.of(context).scaffoldBackgroundColor,
-        elevation: 4.0,
-        margin: EdgeInsets.zero,
-        child: SizedBox(
-          height: (MediaQuery.of(context).size.height -
-                  kMobileSearchBarHeight -
-                  36.0 -
-                  MediaQuery.of(context).padding.vertical -
-                  MediaQuery.of(context).viewInsets.vertical)
-              .clamp(480.0, 1 << 32)
-              .toDouble(),
-          width: MediaQuery.of(context).size.width,
-          child: Center(
-            child: ExceptionWidget(
-              title: Language.instance.COLLECTION_SEARCH_LABEL,
-              subtitle: Language.instance.COLLECTION_SEARCH_WELCOME,
-            ),
-          ),
-        ),
-      );
-    }
-    if (result.isEmpty) {
-      return Card(
-        color: Theme.of(context).scaffoldBackgroundColor,
-        elevation: 4.0,
-        margin: EdgeInsets.zero,
-        child: SizedBox(
-          height: MediaQuery.of(context).size.height -
-              kMobileSearchBarHeight -
-              36.0 -
-              MediaQuery.of(context).padding.vertical -
-              MediaQuery.of(context).viewInsets.vertical,
-          width: MediaQuery.of(context).size.width,
-          child: Center(
-            child: ExceptionWidget(
-              title: Language.instance.COLLECTION_SEARCH_NO_RESULTS_TITLE,
-              subtitle: Language.instance.WEB_NO_RESULTS,
-            ),
-          ),
-        ),
-      );
-    }
-    return Card(
-      elevation: 4.0,
-      margin: EdgeInsets.zero,
-      child: SizedBox(
-        width: MediaQuery.of(context).size.width,
-        child: Column(
-          children: result
-              .map(
-                (e) => ListTile(
-                  title: Text(
-                    e.overflow,
-                    maxLines: 1,
-                    overflow: TextOverflow.ellipsis,
-                  ),
-                  onTap: () {
-                    Navigator.of(context).push(
-                      PageRouteBuilder(
-                        pageBuilder: (context, animation, secondaryAnimation) =>
-                            FadeThroughTransition(
-                          fillColor: Colors.transparent,
-                          animation: animation,
-                          secondaryAnimation: secondaryAnimation,
-                          child: FloatingSearchBarWebSearchScreen(
-                            future: YTMClient.search(e),
-                            query: e,
-                          ),
-                        ),
-                      ),
-                    );
-                  },
-                  leading: Icon(
-                    Icons.search,
-                  ),
-                ),
-              )
-              .toList(),
-        ),
-      ),
-    );
-  }
-}
-
-class FloatingSearchBarWebSearchScreen extends StatefulWidget {
-  final String? query;
-  final Future<Map<String, List<Media>>>? future;
-
-  FloatingSearchBarWebSearchScreen({
-    Key? key,
-    this.query,
-    this.future,
-  }) : super(key: key);
-
-  @override
-  State<FloatingSearchBarWebSearchScreen> createState() =>
-      _FloatingSearchBarWebSearchScreenState();
-}
-
-class _FloatingSearchBarWebSearchScreenState
-    extends State<FloatingSearchBarWebSearchScreen> {
-  final FloatingSearchBarController floatingSearchBarController =
-      FloatingSearchBarController();
-  final FocusNode focusNode = FocusNode();
-  final ValueNotifier<String> query = ValueNotifier<String>('');
-
-  @override
-  void initState() {
-    super.initState();
-    floatingSearchBarController.query = widget.query ?? '';
-    if (widget.query == null) {
-      WidgetsBinding.instance.addPostFrameCallback((_) {
-        floatingSearchBarController.open();
-      });
-    }
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return AnnotatedRegion<SystemUiOverlayStyle>(
-      value: SystemUiOverlayStyle(
-        statusBarColor: Theme.of(context).brightness == Brightness.dark
-            ? Colors.black12
-            : Colors.white12,
-        statusBarIconBrightness: Theme.of(context).brightness == Brightness.dark
-            ? Brightness.light
-            : Brightness.dark,
-      ),
-      child: Scaffold(
-        resizeToAvoidBottomInset: false,
-        body: FloatingSearchBar(
-          controller: floatingSearchBarController,
-          automaticallyImplyBackButton: false,
-          hint: Language.instance.SEARCH_WELCOME,
-          transitionCurve: Curves.easeInOut,
-          width: MediaQuery.of(context).size.width - 2 * tileMargin,
-          height: kMobileSearchBarHeight,
-          margins: EdgeInsets.only(
-            top: MediaQuery.of(context).padding.top + tileMargin,
-          ),
-          onSubmitted: (query) {
-            Navigator.of(context).pushReplacement(
-              PageRouteBuilder(
-                pageBuilder: (context, animation, secondaryAnimation) =>
-                    FadeThroughTransition(
-                  fillColor: Colors.transparent,
-                  animation: animation,
-                  secondaryAnimation: secondaryAnimation,
-                  child: FloatingSearchBarWebSearchScreen(
-                    query: query,
-                    future: YTMClient.search(query),
-                  ),
-                ),
-              ),
-            );
-          },
-          textInputType: TextInputType.url,
-          accentColor: Theme.of(context).primaryColor,
-          onQueryChanged: (value) => query.value = value,
-          clearQueryOnClose: false,
-          transition: CircularFloatingSearchBarTransition(),
-          leadingActions: [
-            FloatingSearchBarAction(
-              child: Padding(
-                padding: const EdgeInsets.all(8.0),
-                child: Icon(Icons.search, size: 24.0),
-              ),
-              showIfOpened: false,
-            ),
-            FloatingSearchBarAction.back(),
-          ],
-          actions: [
-            FloatingSearchBarAction(
-              showIfOpened: false,
-              child: WebMobileAppBarOverflowButton(
-                color: Theme.of(context).appBarTheme.actionsIconTheme?.color,
-                withinScreen: false,
-              ),
-            ),
-            FloatingSearchBarAction.searchToClear(
-              showIfClosed: false,
-            ),
-          ],
-          builder: (context, transition) {
-            return FloatingSearchBarWebSearchTab(query: query);
-          },
-          body: widget.future == null
-              ? FloatingSearchBarScrollNotifier(
-                  child: NowPlayingBarScrollHideNotifier(
-                    child: WebRecommendations(),
-                  ),
-                )
-              : CustomFutureBuilder<Map<String, List<Media>>>(
-                  future: widget.future,
-                  loadingBuilder: (_) => Center(
-                    child: CircularProgressIndicator(
-                      valueColor: AlwaysStoppedAnimation(
-                        Theme.of(context).primaryColor,
-                      ),
-                    ),
-                  ),
-                  builder: (context, data) {
-                    if (data?.isNotEmpty ?? false) {
-                      final widgets = <Widget>[];
-                      data?.forEach(
-                        (key, value) {
-                          widgets.add(
-                            Row(
-                              children: [
-                                SubHeader(key),
-                                Spacer(),
-                              ],
-                            ),
-                          );
-                          value.forEach(
-                            (element) {
-                              if (element is Track) {
-                                widgets.add(WebTrackTile(track: element));
-                              } else if (element is Artist) {
-                                widgets.add(WebArtistTile(artist: element));
-                              } else if (element is Video) {
-                                widgets.add(VideoTile(video: element));
-                              } else if (element is Album) {
-                                widgets.add(WebAlbumTile(album: element));
-                              } else if (element is Playlist) {
-                                widgets.add(WebPlaylistTile(playlist: element));
-                              }
-                            },
-                          );
-                        },
-                      );
-                      return FloatingSearchBarScrollNotifier(
-                        child: NowPlayingBarScrollHideNotifier(
-                          child: CustomListView(
-                            padding: EdgeInsets.only(
-                              top: MediaQuery.of(context).padding.top +
-                                  kMobileSearchBarHeight +
-                                  2 * tileMargin,
-                            ),
-                            shrinkWrap: true,
-                            children: [
-                              Center(
-                                child: ConstrainedBox(
-                                  constraints: BoxConstraints(maxWidth: 840.0),
-                                  child: Column(
-                                    crossAxisAlignment:
-                                        CrossAxisAlignment.center,
-                                    children: widgets,
-                                  ),
-                                ),
-                              ),
-                            ],
-                          ),
-                        ),
-                      );
-                    } else {
-                      return Center(
-                        child: ExceptionWidget(
-                          title: Language
-                              .instance.COLLECTION_SEARCH_NO_RESULTS_TITLE,
-                          subtitle: Language.instance.WEB_NO_RESULTS,
-                        ),
-                      );
-                    }
-                  },
-                ),
-        ),
-      ),
-    );
-  }
-}
diff --git a/pubspec.linux.yaml b/pubspec.linux.yaml
index a36b3eb..216db43 100644
--- a/pubspec.linux.yaml
+++ b/pubspec.linux.yaml
@@ -22,8 +22,6 @@ dependencies:
     path: external/mpris_service.dart
   harmonoid_visual_assets:
     path: external/harmonoid_visual_assets
   safe_session_storage:
     path: external/safe_session_storage
   windows_taskbar:
@@ -86,7 +84,6 @@ dependencies:
   auto_size_text: ^3.0.0
   uuid: ^3.0.6
   synchronized: ^3.0.0+2
-  flutter_speed_dial: ^6.0.0
   flutter_svg: ^1.1.4
 
   # Third-party forked plugins & packages to meet requirements.
diff --git a/pubspec.yaml b/pubspec.yaml
index 1b6f670..9d7f4db 100644
--- a/pubspec.yaml
+++ b/pubspec.yaml
@@ -22,8 +22,6 @@ dependencies:
     path: external/mpris_service.dart
   harmonoid_visual_assets:
     path: external/harmonoid_visual_assets
   safe_session_storage:
     path: external/safe_session_storage
   windows_taskbar:
@@ -87,7 +85,6 @@ dependencies:
   auto_size_text: ^3.0.0
   uuid: ^3.0.6
   synchronized: ^3.0.0+2
-  flutter_speed_dial: ^6.0.0
   flutter_svg: ^1.1.4
 
   # Third-party forked plugins & packages to meet requirements.
